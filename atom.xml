<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiaoguo&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/757cd3455d19b590fa85881a6e97d8e5</icon>
  <subtitle>Stay silly,stay curious,like a child.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//xueningyun.github.io/"/>
  <updated>2020-04-24T15:57:28.992Z</updated>
  <id>//xueningyun.github.io/</id>
  
  <author>
    <name>雪柠云</name>
    <email>guoyufeng_email@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>写给弟弟的话</title>
    <link href="//xueningyun.github.io/2020/04/24/didi/"/>
    <id>//xueningyun.github.io/2020/04/24/didi/</id>
    <published>2020-04-24T15:06:00.000Z</published>
    <updated>2020-04-24T15:57:28.992Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/didi/didi1.jpg" alt="面条"><br>你做的面条，挺好看的，也好吃。<br>你翻我小时候的日记，说我写的日记里，说你讨嫌，又乖巧，一会又调皮，又可爱。你说了我老半天，我说要记得好好念书，要不然以后会吃苦，你说不一定，看自己对生活的要求，平淡一些日子也挺好。<br>对于你的想法，我也不加以限制，希望你有自己的方向，有自己的快乐。下面是刘瑜写给小布谷的一段话，分享给你。<br><a id="more"></a></p><blockquote><p>当我写下“百天”这个字眼的时候，着实被它吓了一跳——一个人竟然可以这样小，小到以天计。在过去100天里，你像个小魔术师一样，每天变出一堆糖果给爸爸妈妈吃。如果没有你，这100天，就会像它之前的100天，以及它之后的100天一样，陷入混沌的时间之流，绵绵不绝而不知所终。<br>我想，应该被感谢的是孩子，是他们让父母的生命“更完整”，让他们的虚空有所寄托，让他们体验到生命层层开放的神秘与欣喜，最重要的是，让他们体验到尽情地爱——那是一种自由，不是吗？能够放下所有戒备去信马由缰地爱，那简直是最大的自由。作为母亲，我感谢你给我这种自由。<br>小布谷，等你长大，如果你想当一个华尔街的银行家，那就去努力吧，但如果你仅仅想当一个面包师，那也不错。如果你想从政，只要出于恰当的理由，妈妈一定支持，但如果你只想做个动物园饲养员，那也挺好。我所希望的只是，在成长的过程中，你能幸运地找到自己的梦想——不是每个人都能找到人生的方向感，又恰好拥有与这个梦想相匹配的能力——也不是每个人都有与其梦想成比例的能力。是的，我祈祷你能“成功”，但我所理解的成功，是一个人对自己所做的事情有敬畏与热情——在妈妈看来，一个每天早上起床都觉得上班是个负担的律师，并不比一个骄傲地对顾客说“看，这个发型剪得漂亮吧”的理发师更加成功。<br>但是，对你的“成就”无所寄望并不等于对你的品格无所寄望。妈妈希望你来到这个世界不是白来一趟，能有愿望和能力领略它波光潋滟的好，并以自己的好来成全它的更好。妈妈相信人的本质是无穷绽放，人的尊严体现在向着真善美无尽奔跑，所以，我希望你是个有求知欲的人，大到“宇宙之外是什么”，小到“我每天拉的屎冲下马桶后去了哪里”，都可以引起你的好奇心；<br>我希望你是个有同情心的人，对他人的痛苦——哪怕是动物的痛苦——抱有最大程度的想象力因而对任何形式的伤害抱有最大程度的戒备心；我希望你是个有责任感的人，意识到我们所拥有的自由、和平、公正就像我们拥有的房子车子一样，它们既非从天而降，也非一劳永逸，需要我们每个人去努力追求与奋力呵护；我希望你有勇气，能够在强权、暴力、诱惑、舆论甚至小圈子的温暖面前坚持说出“那个皇帝其实并没有穿什么新衣”；我希望你敏感，能够捕捉到美与不美之间势不两立的差异，能够在博物馆和音乐厅之外、生活层峦叠嶂的细节里发现艺术；作为一个女孩，我还希望你有梦想，你的青春与人生不仅仅为爱情和婚姻所定义。<br>这个清单已经太长了是吗？对品格的寄望也是一种苛刻是吗？好吧，与其说妈妈希望你成为那样的人，不如说妈妈希望你能和妈妈相互勉励，帮助对方成为那样的人。</p></blockquote><p>希望你能幸运的找到自己的方向，并有之相匹配的能力，并能坚持。不管你是想做一个工程师，还是一名小城市的老师，只要你觉得喜欢，哥哥都支持你，会鼓励你努力走起下去。对了，上次和你说美国疫情严重，你觉得事不关己，甚至有些偏激。其实，对于你所处的和平、医疗健康、安全、教育等等，都是人们努力的结果没并非从天而降，需要我们每个人去奋力呵护。在疫情面前，作为人类，生命都是一样的，没有国界，他们所处的疫情与痛苦，也都是一个个普通的人，以血肉之躯承受着。希望你看待事物，不要带有地方偏见，或者其他偏激。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/didi/didi1.jpg&quot; alt=&quot;面条&quot;&gt;&lt;br&gt;你做的面条，挺好看的，也好吃。&lt;br&gt;你翻我小时候的日记，说我写的日记里，说你讨嫌，又乖巧，一会又调皮，又可爱。你说了我老半天，我说要记得好好念书，要不然以后会吃苦，你说不一定，看自己对生活的要求，平淡一些日子也挺好。&lt;br&gt;对于你的想法，我也不加以限制，希望你有自己的方向，有自己的快乐。下面是刘瑜写给小布谷的一段话，分享给你。&lt;br&gt;
    
    </summary>
    
      <category term="凡间角落" scheme="//xueningyun.github.io/categories/%E5%87%A1%E9%97%B4%E8%A7%92%E8%90%BD/"/>
    
    
      <category term="生活" scheme="//xueningyun.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>折枝</title>
    <link href="//xueningyun.github.io/2020/04/22/zhezhi/"/>
    <id>//xueningyun.github.io/2020/04/22/zhezhi/</id>
    <published>2020-04-22T14:10:29.000Z</published>
    <updated>2020-04-22T15:08:41.370Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/zhezhi/zhezhi.jpg" alt="折枝"><br>桃花谢后，小桃子长出来了。<br>刚好他来了，那个驻村的农业指导干部。<br><a id="more"></a></p><p>他，有股很浓的干部气息，不太好接近，我印象里是这样的。<br>“折枝没？你们家的桃树。”他问我说。<br>我说没有。<br>“该折枝了，要不然过段时间，桃子会掉光。”<br>“你会吗？折枝。”<br>我摇头，他起身便往外走，手把手教我折枝。<br>到了果园，对着桃树，边折枝，边讲解，时而看向我，问我懂没。<br>“这种朝上的枝芽都需要折掉。”<br>“朝下长的，或者长在枝条底下的小枝芽，都可以折掉。”<br>“嗯嗯”我向他点头示意。<br>“留下结了桃子的枝芽，再留一些朝侧面长的枝芽，给桃子提供营养。”<br>“有坏掉的桃子需要折掉，要是一根枝条上结的桃子比较多，可以选桃子好的留下。像这个，就可以折掉。”<br>……<br>他很认真地讲着，我认真的听着，讲完还让我折给他看，实践一下学习效果。<br>他说这些天有空就折枝完，要是木质化了就迟了。接着他说自己十几亩桃树，每天都要抽空去管理…<br>听着他说起他的桃园，我想起妈妈和我说过的一件事。<br>他，前两年暑假的时候，回老家桃园摘黄桃。<br>载着妻子和小女儿，还有刚摘的黄桃，在雨里赶着回家，雨下的很大，车开的很快。<br>雨越下越大，挡风玻璃的雨刷无力地刷着雨水，一片模糊。<br>嘭，车子冲下了山路。<br>他擦伤点皮，小女儿受伤挺严重，好在抢救回来了，但妻子走了。<br>妻子走后，大女儿怪罪他，不想和他说话。大女儿变邋遢了，学习退步，他管不动，也无能为力。很多时候，他都觉得走的人应该是他。<br>过去两年了，他依旧打理着桃园，桃子长得很好。<br>折掉吸收养分的、多余的枝芽，留下好的桃子。学会“折枝”，继续向前。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/zhezhi/zhezhi.jpg&quot; alt=&quot;折枝&quot;&gt;&lt;br&gt;桃花谢后，小桃子长出来了。&lt;br&gt;刚好他来了，那个驻村的农业指导干部。&lt;br&gt;
    
    </summary>
    
      <category term="凡间角落" scheme="//xueningyun.github.io/categories/%E5%87%A1%E9%97%B4%E8%A7%92%E8%90%BD/"/>
    
    
      <category term="生活" scheme="//xueningyun.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="//xueningyun.github.io/2020/04/21/paixu/"/>
    <id>//xueningyun.github.io/2020/04/21/paixu/</id>
    <published>2020-04-21T05:15:00.000Z</published>
    <updated>2020-04-21T10:23:18.189Z</updated>
    
    <content type="html"><![CDATA[<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>简单选择排序，通过n-i次关键字间的比较，从n-i+1个记录中选出关键字最小的记录，并和第i个记录交换之，即从第一个数据开始，进行比较，找出最小值，第二次从第二个数据开始，以此类推。C语言代码如下(其中Sqlist为结构体定义，由数组和数组长度构成)：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void SelectSort(Sqlist *L)</span><br><span class="line">&#123;</span><br><span class="line">int <span class="built_in">i</span>,<span class="built_in">j</span>,<span class="built_in">min</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;L-&gt;<span class="built_in">length</span>;<span class="built_in">i</span>++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">min</span>=<span class="built_in">i</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">j</span>=<span class="built_in">i</span>+<span class="number">1</span>;<span class="built_in">j</span>&lt;=L-&gt;<span class="built_in">length</span>;<span class="built_in">j</span>++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(L-&gt;r[<span class="built_in">min</span>]&gt;L-&gt;r[<span class="built_in">j</span>])</span><br><span class="line"><span class="built_in">min</span>=<span class="built_in">j</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">i</span>!=<span class="built_in">min</span>)</span><br><span class="line">swap(L,<span class="built_in">i</span>,<span class="built_in">min</span>);</span><br><span class="line">&#125;</span><br><span class="line">void swap(Sqlist *L,int <span class="built_in">i</span>,int <span class="built_in">j</span>)</span><br><span class="line">&#123;</span><br><span class="line">int temp=L-&gt;r[<span class="built_in">i</span>];</span><br><span class="line">L-&gt;r[<span class="built_in">i</span>]=L-&gt;r[<span class="built_in">j</span>];</span><br><span class="line">L-&gt;r[<span class="built_in">j</span>]=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>两两比较相邻记录的关键字，如果反序则交换，直到没有反序记录为止。</p><div align="center"><img width="86%" height="86%" src="/images/paixu/maopao1.png"></div><br><div align="center"><img width="86%" height="86%" src="/images/paixu/maopao2.png"></div><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void BubbleSort(Sqlist *L)</span><br><span class="line">&#123;</span><br><span class="line">int <span class="built_in">i</span>,<span class="built_in">j</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;L-&gt;<span class="built_in">length</span>;<span class="built_in">i</span>++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">j</span>=L-&gt;<span class="built_in">length</span>;<span class="built_in">j</span>&gt;=<span class="built_in">i</span>;<span class="built_in">j</span>--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(L-r[<span class="built_in">j</span>]&gt;L-r[<span class="built_in">j</span>+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">swap(L,<span class="built_in">j</span>,<span class="built_in">j</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>将一个记录插入到一个有序表中，从而得到一个新的有序表。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void InsertSort(Sqlist *L)</span><br><span class="line">&#123;</span><br><span class="line">int i,j;</span><br><span class="line">int x; <span class="comment">//设置哨兵</span></span><br><span class="line"><span class="function"><span class="title">for</span>(i=1;i&lt;L-&gt;</span>length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="title">if</span>(L-&gt;</span><span class="function"><span class="title">r</span>[i]&lt;L-&gt;</span>r[i-<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="title">x</span>=L-&gt;</span>r[i];</span><br><span class="line"><span class="function"><span class="title">for</span>(j=i-1;L-&gt;</span>r[j]&gt;x;j--)</span><br><span class="line">&#123;</span><br><span class="line">L-&gt;<span class="function"><span class="title">r</span>[j+1]=L-&gt;</span>r[j];</span><br><span class="line">&#125;</span><br><span class="line">L-&gt;r[j+<span class="number">1</span>]=x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并归排序"><a href="#并归排序" class="headerlink" title="并归排序"></a>并归排序</h3><p>利用分治思想，将n个记录的序列，一层层对半分层两个子序列，最终得到[n/2]个长度为2或者1的有序子序列，再两两并归，最终得到长度n的有序序列。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*num[]为需排序的序列，tum[]为排序后的序列，first为序列起点，last为序列尾点*/</span></span><br><span class="line">void mergeSort(int *<span class="built_in">num</span>,int <span class="built_in">first</span>,int <span class="built_in">last</span>,int *tum)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">first</span>&lt;<span class="built_in">last</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid;</span><br><span class="line">        mid=(<span class="built_in">last</span>-<span class="built_in">first</span>)/<span class="number">2</span>+<span class="built_in">first</span>;</span><br><span class="line">        mergeSort(<span class="built_in">num</span>,<span class="built_in">first</span>,mid,tum);</span><br><span class="line">        mergeSort(<span class="built_in">num</span>,mid+<span class="number">1</span>,<span class="built_in">last</span>,tum);</span><br><span class="line">        mergetow(<span class="built_in">num</span>,<span class="built_in">first</span>,mid,<span class="built_in">last</span>,tum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void mergetow(int *<span class="built_in">num</span>,int <span class="built_in">first</span>,int mid,int <span class="built_in">last</span>,int *tum)</span><br><span class="line">&#123;</span><br><span class="line">    int i,j,n,m;</span><br><span class="line">    int k=<span class="number">0</span>;</span><br><span class="line">    i=<span class="built_in">first</span>;</span><br><span class="line">    j=mid+<span class="number">1</span>;</span><br><span class="line">    n=mid+<span class="number">1</span>;</span><br><span class="line">    m=<span class="built_in">last</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i&lt;n&amp;&amp;j&lt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">num</span>[i]&lt;<span class="built_in">num</span>[j])</span><br><span class="line">        &#123;</span><br><span class="line">            tum[k++]=<span class="built_in">num</span>[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tum[k++]=<span class="built_in">num</span>[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)//将剩余的<span class="built_in">num</span>[]元素复制到tum中</span><br><span class="line">    &#123;</span><br><span class="line">        tum[k++]=<span class="built_in">num</span>[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        tum[k++]=<span class="built_in">num</span>[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">num</span>[<span class="built_in">first</span> + i] = tum[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>采用分治思想，将序列进行分割，即划分交换。<br>基本思想为：<br>1、先从数列中取出一个数作为基准数。<br>2、分区，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。<br>3、对左右区间重复第二步，直到各区间只有一个数。<br>有一个很形象的描述，就是：挖坑填数+分治法。<br>1、如示例数组，取区间第一个数为基准数。</p><p><div align="center"><img width="95%" height="95%" src="/images/paixu/kuaisu1.png"></div><br>2、有基准数后，便进行分区，将小于或等于a<a href="基准数">0</a>放在左边，大于a[0]放在右边。<br>分区过程，即挖坑填数。<br>初始时，i = 0;  j = 9;   e = a[i] = 72。<br>由于已经将a[0]中的数保存到e中，可以理解成在数组a[0]上挖了个坑，可以将其它数据填充到这来。<br>从j开始（即数组的终端，最右边开始）向前找一个比e小或等于e的数。当j=8，符合条件，将a[8]挖出再填到上一个坑a[0]中。坑a[0]被填好，又产生了一个新坑a[8]，所以接着找数字来填a[8]这个坑。这次从i开始向后找一个大于e的数，当i=3，符合条件，将a[3]挖出填到上一个坑a[8]中。<br>数组变为：</p><p><div align="center"><img width="95%" height="95%" src="/images/paixu/kuaisu2.png"></div><br>此时，i=3，j=7,e=72。<br>3、重复步骤2，挖的坑大于基准数则从后向前找，坑小于基准数则由前往后找。<br>4、直到i=j时，退出，本例中i=j=5时退出，此时坑为a[5],并将e填入坑a[5]。<br>数组变为：</p><p><div align="center"><img width="95%" height="95%" src="/images/paixu/kuaisu3.png"></div><br>由上图，a[5]左边的数都小于它，右边的数都大于它。<br>5、以a[5]为界划分为左右两个数组子区间，然后再对左右两个子区间a[0~4]、a[6~9]重复1、2、3、4步骤，直到排序完成。<br>C语言代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">void quick_sort(int *num,int L,int H)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;H)</span><br><span class="line">    &#123;   int <span class="built_in">i</span>=L;</span><br><span class="line">        int <span class="built_in">j</span>=H;</span><br><span class="line">        int e=num[L];</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">i</span>&lt;<span class="built_in">j</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">i</span>&lt;<span class="built_in">j</span>&amp;&amp;num[<span class="built_in">j</span>]&gt;=e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">j</span>--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">i</span>&lt;<span class="built_in">j</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                num[<span class="built_in">i</span>++]=num[<span class="built_in">j</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">i</span>&lt;<span class="built_in">j</span>&amp;&amp;num[<span class="built_in">i</span>]&lt;e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">i</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">i</span>&lt;<span class="built_in">j</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                num[<span class="built_in">j</span>--]=num[<span class="built_in">i</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num[<span class="built_in">i</span>]=e;</span><br><span class="line">        quick_sort(num,L,<span class="built_in">i</span><span class="number">-1</span>);</span><br><span class="line">        quick_sort(num,<span class="built_in">i</span>+<span class="number">1</span>,H);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考文献</strong></p><ul><li><font color="black" size="4">陈杰 《大话数据结构》</font></li><li><font color="black" size="4">白话经典算法系列之六 快速排序 快速搞定 <a href="https://blog.csdn.net/MoreWindows/article/details/6684558" target="_blank" rel="noopener">CSDN</a></font></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h3&gt;&lt;p&gt;简单选择排序，通过n-i次关键字间的比较，从n-i+1个记录中选出关键字最小的记录，并和第i个记录交换之，即从第一个数据开始，进行比较，找出最小值，第二次从第二个数据开始，以此类推。C语言代码如下(其中Sqlist为结构体定义，由数组和数组长度构成)：&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void SelectSort(Sqlist *L)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;&amp;lt;L-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;;&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;=&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;=&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;&amp;lt;=L-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;;&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(L-&amp;gt;r[&lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;]&amp;gt;L-&amp;gt;r[&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;=&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;!=&lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	swap(L,&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void swap(Sqlist *L,int &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;,int &lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	int temp=L-&amp;gt;r[&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	L-&amp;gt;r[&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;]=L-&amp;gt;r[&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	L-&amp;gt;r[&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;]=temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="//xueningyun.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数据结构" scheme="//xueningyun.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="//xueningyun.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="//xueningyun.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络笔记</title>
    <link href="//xueningyun.github.io/2020/04/17/jsjwl/"/>
    <id>//xueningyun.github.io/2020/04/17/jsjwl/</id>
    <published>2020-04-17T13:36:00.000Z</published>
    <updated>2020-04-23T09:25:36.408Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/jsjwl/jsjwl0.jpg" alt="加油"><br>为韩立刚老师计算机网络课程学习笔记<br><a id="more"></a></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>计算机网络最重要的两个功能，连通和共享。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p><strong>网络</strong><br>网络=结点+链路<br><strong>因特网</strong><br>因特网（internet）为世界上最大的互联网（Internet）。<br><strong>ISP</strong><br>即因特网服务的提供者，如中国移动等。<br><strong>因特网组成</strong><br>因特网由边缘部分和核心部分组成。<br>因特网边缘的主机又称为端系统，核心部分的核心器件为路由器，提供选择和分组转发服务。<br><strong>通信方式</strong><br>端系统的两类通信方式：C/S模式和P2P模式<br>C/S模式：<br>C：即clien，客户，服务请求方，（运行）客户进程（的计算机）。<br>S：即sever，服务器，服务提供方。<br>P2P模式：<br>即peer-to-peer，P2P方式是对等连接，即双方既是服务请求者也是服务提供者。<br><strong>三种交换方式</strong><br>电路交换：必须建立物理连接，需要“建立连接-通话-释放连接”三个步骤，信道独享。<br>报文交换：基于存储转发，直接传送整个报文。<br>分组交换：采用存储转发技术，但非整个报文直接传输，而是先进行报文分组，分成多个分组后，在每个分组数据前加上一些控制信息和地址信息构成首部。<br><strong>性能指标</strong><br>速率：主机在数字信道上传送据的输。<br>带宽：一般指主机发送数据的最大速度。<br>吞吐量：单位时间通过的数据。<br>时延：传输时延（发送时延）+传播时延+处理时延+排队时延。高速网络链路，提的高速网络链路，提的仅是数据的发送速率，即缩小发送时延。<br>时延带宽积：传播时延*带宽，表明这个链路可以容纳多少比特。<br>往返时间（RTT）：发送方发送数据到接收的确认。<br>利用率：信道有多少时间有数据通过，利用率过高会导致时延过大。<br><strong>网络体系结构</strong></p><div align="center"><img width="86%" height="86%" src="/images/jsjwl/wangluotixijiegou.jpg"></div><br>各层作用：<br>应用层：进程间的交互来完成特定网络。<br>运输层：负责向两个主机中进程之间的通信提供数据传服务。<br>网络层：为分组交换上不同主机提供通信服务。<br>数据链路层：分装成帧、透明传输差错检验。<br>物理层：透明的传送比特流。<br><br>### 物理层<br>物理层考虑的是如何传输连接在各种计算机的传输媒体上传输数据比特流，物理层的作用是尽可能的屏蔽掉这些传输媒体和通信手段的差异。<br><br>#### 基本概念<br>四大特性：<br>1、机械特性：接口所用接线器的形状、尺寸、引脚数目和排列等等。<br>2、电气特性：线路上的电压范围。<br>3、功能特征：不同电平代表的意义。<br>4、过程特性：时序问题。<br>模拟信号：连续的信号。<br>数字信号：离散的信号。<br>码元：时间域上代表不同离散数值的基本波形。<br>基带信号：来自信源的信号。<br>基带调制（编码）：数字到数字。<br>带通调制：将基带信号调制到载波上（如调频），数字到模拟。<br>常见编码方式：<br><div align="center"><img width="86%" height="86%" src="/images/jsjwl/wlc1.png"></div><br>曼彻斯特编码自带同步信号，但是频带宽度比原始的基带信号增加了一倍。<br>信道容量：即信道的最大传输速率，影响因素有两个，信道能通过的频率范围和信噪比。<br>码间串扰：高频分量在传输时收到衰减，接收端收到的波形前沿和后沿变得不那么陡峭，使得码元之间的界限不那么明确，这种现象叫码间串扰。<br>奈氏准则：在假定的理想条件下，为了避免码间串扰,码元的传输速率的上限值。在任何信道中，码元传输的速率是有上限的，传输速率超过此上限，就会出现严重的码间串扰的问题，使接收端对码元的判决(即识别)成为不可能。<br>信噪比：信号平均功率和噪声的平均功率之比，记为S/N，单位为分贝（dB）。<br><div align="center"><img width="86%" height="86%" src="/images/jsjwl/wlc2.png"></div><br>香农公式：<br><div align="center"><img width="86%" height="86%" src="/images/jsjwl/wlc3.png"></div><br>C为传输速率，W为带宽，S为信号平均功率，N为噪声平均功率。<br>香农公式表明，信道的带宽或者信道中的信噪比越大，信道的极限传输速率越高。香农公式的意义在于:只要信息传输速率低于信道的极限信息传输速率，就一定可以找到某种办法来实现无差错的传输。<br>对于带宽频度已经确定的信道，信噪比也不能提高，那么可以让每一个码元携带更多比特的信息量。<br><br>#### 传输媒体<br>有引导型和非引导型。<br>引导型传输媒体有：双绞线（通过绞合减少相邻导线电磁干扰）、屏蔽双绞线、同轴电缆、光缆（多模光缆和单模光缆）。<br>非引导型传输媒体有：微波接力和卫星通信（时延较大）。<br><br>#### 信道复用<br>频分复用（FDM）、时分复用（TDM）、统计时分复用（STDM）、波分复用（WDM）、码分复用（CDM）<br><br>#### 带宽接入技术<br>ADSL技术：用数字技术对模拟电话用户线进行改造。用户两端各安装一个ADSL调制解调器。<br>光纤同轴混合网（HFC网）。<br>FTTx（光纤到x）：如FTTH（Fiber To The Home）光纤到户。<br><br>### 数据链路层<br>两种类型：点对点信道和广播信道。<br>数据链路层研究的问题是在一个局域网里面，分组怎么从一个主机到达另一个主机。<br>要解决三个问题：封装成帧、透明传输、差错检测。<br><br>#### 点到点信道<br>链路：从一个结点到相邻结点的一段物理线路。<br>数据链路：物理链路+实现通信协议的硬件和软件。<br>帧：点对点数据链路层的协议数据单元。<br><br>##### 三个基本问题<br>1.封装成帧<br>一段数据前后分别添加首部和尾部，就可以构成一个帧。每种数据链路层协议都规定了帧的数据部分长度上限-最大传送单元MTU。帧定界SOH和EOT作为首尾定界符。<br>2、透明传输<br>透明传输的意思就是：无论什么样比特组合的数据都可以通过数据链路层，即帧头、帧尾等特殊字符也能正常传输。<br>如果数据中出现了帧头帧尾等字符，可以在SOH和EOT这样的首位定界符前面加上一个ESC转义字符（字节填充），如果有数据部分有ESC，就在ESC前再加一个ESC，之后接收方删掉ESC就好。<br>3、差错检测<br>有两类差错：比特差错（误码）、传输差错（帧丢失、帧重复、帧失序）。<br>检测一般采用<a href="https://blog.csdn.net/qq_32616315/article/details/71374965" target="_blank" rel="noopener">CRC</a>校验。<br><br>##### PPP协议<br>PPP协议是用户计算机和ISP进行通信时所使用的数据链路层协议。<br>三个组成部分：<br>1、将IP数据报封装到串行链路的方法。<br>2、链路控制协议LCP。<br>3、网络控制协议NCP。<br>PPP协议的帧结构：<br><div align="center"><img width="86%" height="86%" src="/images/jsjwl/sjllc1.png"></div><br>F：标志字段，标志帧的开始和结束，如果出现两个标志字段，就表示这是一个空帧，应当丢弃。<br>A和C：至今没有给出定义。没携带任何信息。<br>协议字段：表示该段数据使用的协议，如协议字段为0x0021时，说明信息部分是IP数据报；是0xC021说明是LCP的数据；是0x8021说明是网络层的控制数据。<br>信息部分：最多不超过1500字节。<br>FCS：是使用CRC的帧检验序列。<br>字节填充：<br>为透明传输，即若信息部分出现了0x7E就变成（0x7D，0x7E），如果出现了0x7D就变成（0x7D，0x7D），就是前面加了ESC转义。<br>零比特填充：<br>数据部分发现5个“1”就在后面立即填入1个“0”，接收端再删除多余的“0”就好了。<br>PPP协议工作流程：<br>用户拨号接入ISP，就建立了一条从用户PC到ISP的物理连接。这时，由用户PC向ISP发送一系列的链路控制协议LCP分组，建立LCP连接。接着再进行网络层配置，网络控制协议NCP给新接入的用户PC分配一个临时的IP地址。<br>通信完毕之后，NCP释放网络层连接，收回IP地址；释放LCP数据链路层连接；释放物理层连接。<br><br>#### 广播信道<br>局域网就是使用广播信道。其拓扑结构分类有：星型网（hub）、总线网、环形网。<br><br>##### 共享信道的方法<br>1、静态划分<br>频分复用（FDM）、时分复用（TDM）、统计时分复用（STDM）、波分复用（WDM）、码分复用（CDM）。此处不讨论。<br>2、动态媒体接入控制（多点接入），分为随机接入和受控接入。<br><br>##### CSMA/CD协议<br>CSMA/CD协议，载波监听（发送前和发送中都要不停的检测信道）、多点接入（总线型网络）、碰撞检测（边发送边检测），相比CSMA加入了碰撞检测。<br>发送数据的站会经过2t才会知道自己发送的数据有没有发生碰撞，这个2t又称为争用期（碰撞窗口：51.2us），以太网规定了最短帧长为64字节，因为对于10Mb/s的以太网，发送512bit的时间正好是51.2us。CSMA/CD协议是一种半双工协议。对于发生碰撞的数据采用截断二进制指数退避算法来确定重传的时机。以太网还规定了帧间最小间隔为9.6us，目的是为了使刚刚收到数据帧的站的接收缓存来得及清理，做好接收下一帧的准备。<br><br>##### MAC地址<br>MAC地址：48位，固化在适配器的ROM中，最后一位为I/G位，当I/G位为0时，表示单个站地址，为1时表示组地址，用来进行多播。有单播、广播和多播三种。<br><div align="center"><img width="86%" height="86%" src="/images/jsjwl/sjllc2.png"></div><br>类型：表示上一层使用的是什么协议。如果是IP协议，那么类型字段就为0x0800。<br>FCS：CRC检验时的帧检验序列。<br><br>##### 网络设备<br>适配器（网卡）：<br>计算机通过适配器与外界局域网连接。适配器的功能：1、数据串行传输和并行传输的转换。2、必须有对数据进行缓存的芯片。3、实现以太网的协议。适配器实现了物理层和数据链路层两层功能。<br>集线器：<br>集线器是一个多端口转发器，工作在物理层，仅仅简单的转发比特；不进行碰撞检测。<br>网桥：<br>工作在数据链路层，网桥根据MAC帧的目的地址进行转发（选择某一接口）和过滤（扔掉）。网桥将以太网分割成若干网段。网桥依靠转发表来转发帧，共享带宽。<br>目前使用最多的为透明网桥，能自我学习。<br>交换机：<br>多接口网桥-以太网交换机，工作在数据链路层，内转转发表也是根据自学习算法建立的。交换机的最大优先：独享带宽而不是共享带宽。<br><br>### 网络层<br>网络层讨论的是多个网络通过路由器互联成为一个互联网络的问题。<br><br>####  网络层提供两种服务<br>1、虚电路服务，类似于传统电话网。<br>2、网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。不保证质量。此为因特网设计思路，为重点。<br><br>#### IP协议<br>与IP协议配套使用的有：地址解析协议（ARP协议）、网际控制报文协议（ICMP协议）、网际组管理协议（IGMP协议）。<br>ARP协议：将IP地址广播，解析目标IP地址的MAC地址。<br>ICMP协议：允许路由器报告差错情况，提供异常报告。有差错报文和询问报文两类。<br>IGMP协议：用于多播、组播等。<br><div align="center"><img width="86%" height="86%" src="/images/jsjwl/wangluoceng1.png"></div><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p>IP地址32位，全球唯一。经过三个历史阶段：分类的IP地址、子网划分和构成超网。<br>IP地址划分为网络号和主机号，有五类地址：</p><div align="center"><img width="86%" height="86%" src="/images/jsjwl/wangluoceng2.png"></div><br>子网掩码用于告诉路由属于哪个网络。<br>无分类编址CIDR（构成超网）：<br>CIDR记法：1、省略末尾的零。2、在网络前缀后面加*。<br><br>##### 特殊的IP地址<br>1、网络号+全1（主机号），为某网络的广播地址。<br>2、网络号+全0，某网络号。<br>3、127+任意，本机。<br><br>#### IP数据报<br><br>##### 报文构成<br>IP数据报由首部和数据部分组成。首部的固定长度20字节，最小20字节。<br><div align="center"><img width="86%" height="86%" src="/images/jsjwl/wangluoceng3.png"></div><br>版本：4或者6。<br>首部长度：单位4字节。<br>区分服务：一般不适用。<br>总长度：首部+数据部分，单位是字节，如果超过MTU就要分片。以太网的MTU是1500，IP协议规定因特网中MTU都必须大于576字节（512+60+4）。<br>标识：同一个数据包的分片数据包标识字段相同。<br>标志：目前只有两位有意义，MF、DF，包还是片。<br>片偏移：单位8字节，标识某片在原分组中的相对位置，本片的首字节/8。<br>生存时间：TTL，标明数据报的寿命，为防止无法交付的数据报的网络中兜圈子，后面改为“跳数限制”。<br>协议：指明数据报所携带的数据是何种协议。<br>首部校验和：检验首部，不包括数据部分。<br><br>##### 路由的分组交付<br>1、从数据报的首部提取目的主机的IP地址:D,得出目的网络地址为N。<br>2、若N就是与此路由器直接相连的某个网络地址，则进行直接交付，(把目的主机地址D转换为具体的硬件地址，把数据报封装为MAC帧，再发送此帧);否则就是间接交付，执行3。<br>3、若路由表中有目的地址为D的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器:否则，执行4。<br>4、若路由表中有到达网络N的路由，则把数据报传送给路由表中所指明的下-跳路由器:否则，执行5。<br>5、若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器:否则，执行6。<br>6、报告分组出错。<br><br>#### 划分子网<br>使用子网时的分组转发：<br>(1)提取目的IP地址<br>(2)将IP地址与各网络子网掩码逐位相与，判断是否可以直接交付，不行则执行(3)<br>(3)看是否有特定路由，没有执行(4)<br>(4)用各行的子网掩码与IP地址相与，判断是否和目的网络地址相等，如果相等，则数据传给下一跳。如果不相等，执行(5)<br>(5)看看路由表里面是不是有默认路由，如果没有<br>(6)报告转发分组出错。<br><br><br>### 传输层<br>运输层为相互通信的应用进程提供逻辑通信，运输层提供端到端的通信。运输层还提供复用和分用功能。复用指的是发送方的不同进程都可以使用同一个运输层协议传送数据。分用指的是接收方的运输层在剥去报文的首部后能够把这些数据正确交付目的应用进程。运输层提供应用进程之间的逻辑通信。<br>重点为TPC协议和UDP协议，TCP协议的滑动窗口、流量控制、拥塞控制等。<br><br>#### UDP协议<br>UDP协议，为用户数据报协议。UDP协议只在IP数据报服务上增加了复用和分用以及差错检测的功能。<br><br>##### 特点<br>（1）UDP是无连接的。<br>（2）UDP尽最大努力交付。<br>（3）UDP是面向报文的。将应用层交下来的报文，不分片加上首部就交给IP层，一般用于一个报文就可以传输完成的数据报文。<br>（4）UDP没有拥塞控制。<br>（5）UDP支持一对一、一对多、多对一和多对多的交互通信。<br>（6）UDP首部开销小。只有8字节。<br><br>##### 首部结构<br><div align="center"><img width="86%" height="86%" src="/images/jsjwl/csc1.png"></div><br>(1)源端口，如果不需要对方回信，就全为0.<br>(2)目的端口<br>(3)长度，UDP用户数据报的长度，最小值为8.<br>(4)检验和，检查传输过程是否有错，有就丢弃。<br>伪首部是计算校验和的时候临时加给UDP数据报的。<br><br>#### TCP协议<br>TCP协议，传输控制协议。<br><br>##### 主要特点<br>(1)TCP是面向连接的协议。<br>(2)只能一对一。<br>(3)TCP提供可靠交付服务。<br>(4)TCP提供全双工。<br>(5)TCP是面向字节流的。TCP把应用程序交下来的数据看成一连串无结构的字节流。<br><br>##### 首部结构<br><div align="center"><img width="86%" height="86%" src="/images/jsjwl/csc2.png"></div><br>TCP报文段的首部的前20个字节是固定的。<br>序号：TCP是面向字节流的，每一个字节都按顺序编号。首部中的序号字段值指的是本报文段所发送的数据的第一个字节的序号。<br>确认号：期望收到下一个报文段的第一个数据字节的序号。<br>数据偏移：指出TCP报文段的数据起始处距离TCP报文段的起始长度有多远，其实就是首部长度。单位是4字节，首部长度60个字节。<br>保留：今后使用的。<br>紧急URG：URG=1时，表明紧急指针字段有效。需要配合紧急指针字段使用。<br>确认ACK：当ACK = 1时确认号字段才有效。当ACK = 0时，确认号无效。TCP规定，连接建立后所有传送的报文段都必须把ACK置1。<br>推送PSH：接收方接受到PSH = 1的报文段之后就会尽快交付接收应用进程。<br>复位RST：重新建立连接。<br>同步SYN：SYN = 1时，说明是一个连接请求或者连接接收报文。<br>终止FIN：FIN = 1时，说明是一个请求释放连接的报文。<br>窗口：指的是发送本报文段一方的接收窗口。告诉对方：从本报文段首部中的确认号算起，接收方目前允许对方发送的数据量。目的是控制发送方设置其发送窗口的大小。<br>检验和：检验首部和数据部分。<br>紧急指针：仅在URG = 1时才有意义。指明紧急数据的字节数。<br>选项：不使用“选项”时，TCP首部长度是20字节。<br><br>#### 可靠传输<br><strong>停止等待协议</strong>发送完一个分组就等待，收到接受方的确认之后再发送下一个分组。如果出现差错就超时重传。<br>常称为自动重传请求ARQ。停止等待协议最大的缺点是信道利用率低。<br><div align="center"><img width="86%" height="86%" src="/images/jsjwl/csc3.png"></div><br><div align="center"><img width="86%" height="86%" src="/images/jsjwl/csc4.png"></div><br><strong>连续ARQ协议</strong>发送方每收到一个确认，就把发送窗口向前滑动一个分组的位置。接收方一般采用累计确认的方式，对按序到达的最后一个分组发送确认。<br><div align="center"><img width="86%" height="86%" src="/images/jsjwl/csc5.png"></div><p><strong>滑动窗口的可靠实现</strong><br>发送窗口：在没有收到B的确认的情况下，A可以连续把窗口内的数据都发送出去。但是没有收到确认的数据都需要保留一份副本，以便超时重传。</p><div align="center"><img width="86%" height="86%" src="/images/jsjwl/csc6.png"></div><br>上面这种情况下，B发送的确认报文段中的确认号仍然是31。但是如果接收到了31号数据就会把31~33的数据交付主机。也就是说会暂存没有按序到达的序号。<br><br><strong>超时时间重传选择</strong><br>TCP采用了一种自适应的算法，TCP保留一个RTT的加权平均往返时间RTTs。<br><div align="center"><img width="95%" height="95%" src="/images/jsjwl/csc7.png"></div><br>超时重传时间RTP会稍大于RTTs。<br><div align="center"><img width="95%" height="95%" src="/images/jsjwl/csc8.png"></div><p><strong>选择确认</strong><br>当出现数据不连续丢失时，告诉发送方不要重传已经接受到的数据，重传所有未被确认的数据块。</p><h4 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h4><p>流量控制：让发送方的发送速率不要太快，要让接收方来得及接收。注意TCP窗口单位是字节，而不是报文段。如下图，假设一个报文为100个字节。</p><div align="center"><img width="95%" height="95%" src="/images/jsjwl/csc9.png"></div><h4 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h4><p>拥塞：某段时间，对网络中某一资源的需求超过了该资源所能提供的可用部分，网络性能变坏。拥塞问题是非常复杂的问题，单独改进某一方面无法解决。<br>拥塞控制：防止过多的数据注入到网络中，这样可以使网络的路由器或链路不致过载。拥塞控制是一个全局性的问题，而流量控制是一个端到端的问题。</p><div align="center"><img width="95%" height="95%" src="/images/jsjwl/csc10.png"></div><br>当网络的吞吐量随着提供的负载的增大而下降，这时网络就进入了拥塞状态。当吞吐量下降到零，就是死锁。<br><br>拥塞控制方法：慢开始、拥塞避免、快重传和快恢复。<br>下图为慢开始、拥塞避免<br><div align="center"><img width="95%" height="95%" src="/images/jsjwl/csc11.png"></div><br>快重传和快恢复<br>快重传要求接收方收到一个失序报文段后立即发出三个重复确认。<br><div align="center"><img width="95%" height="95%" src="/images/jsjwl/csc12.png"></div><br>快恢复<br><div align="center"><img width="95%" height="95%" src="/images/jsjwl/csc13.png"></div><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>应用层要解决的问题是：应用进程通过什么样的应用层协议来使用网络提供的通信服务。<br>重点：<br>(1)DNS协议<br>(2)万维网和HTTP协议，以及万维网的两种不同的信息搜索引擎。<br>(3)电子邮件的传送过程，SMTP协议和POP3协议使用的场合<br>(4)基于万维网的电子邮件系统的特点。</p><h4 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h4><p>DNS域名系统：当某一个应用进程需要把主机名解析为IP地址，该应用进程调用解析程序，并成为DNS的一个客户，把待解析的域名放在DNS的请求报文中，以UDP用户数据报方式发送给本地域名服务器。本地域名服务器查找域名后，把相应的IP地址放在回答报文中返回。如果本地域名服务器不能回答该请求，则此域名服务器就暂时成为DNS中的一个客户，向其他域名服务器发出查询请求。直到能得到IP地址为止。</p><h4 id="文件传送协议"><a href="#文件传送协议" class="headerlink" title="文件传送协议"></a>文件传送协议</h4><p>文件传送协议FTP是使用最广泛的文件传送协议，基于TCP的FTP和基于UDP的TFTP都属于共享文件协议的一大类，即复制整个文件，特点是：存取一个文件，必须先获得一个本地的文件副本。如果要修改文件，只能对文件的副本进行修改，然后再将修改后的文件副本返回原节点。<br>文件传输时，FTP需要建立两个TCP连接，一个控制连接（21端口）和一个数据连接（20端口）。<br>TFTP使用C/S模式，使用UDP数据报。TFTP的优点是：<br>（1）可用于UDP环境。<br>（2）TFTP代码所占内存小。</p><h4 id="超文本协议（HTTP）"><a href="#超文本协议（HTTP）" class="headerlink" title="超文本协议（HTTP）"></a>超文本协议（HTTP）</h4><p>HTTP协议定义了浏览器怎样向万维网服务器请求万维网文档，以及服务器怎么把文档传给浏览器。HTTP采用TCP连接传送。<br>用户点击鼠标后发生的几个事件：<br>(1)浏览器分析链接指向页面的URL。<br>(2)浏览器向DNS请求解析于域名对应的IP地址。<br>(3)域名系统DNS解析出IP地址并返回。<br>(4)浏览器与服务器建立TCP连接。<br>(5)浏览器发出取文件命令。<br>(6)服务器给出响应，将文件发送浏览器。<br>(7)释放TCP连接。<br>(8)浏览器将文件渲染成页面。</p><h4 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h4><p>电子邮件系统三个主要组成构建：用户代理、邮件服务器、邮件传输协议（SMTP、POP3等）。</p><div align="center"><img width="95%" height="95%" src="/images/jsjwl/csc14.png"></div><p><strong>参考文献</strong></p><ul><li><font color="black" size="4">谢希仁 《计算机网络》</font></li><li><font color="black" size="4">韩立刚  计算机网络课程 <a href="https://www.bilibili.com/video/BV1Hx411D7rn/?p=95" target="_blank" rel="noopener">B站</a></font></li><li><font color="black" size="4">leifei个人学习笔记 微信公众号<a href="https://mp.weixin.qq.com/s/qVfvXk5JjJFP0tS0x_xcDA" target="_blank" rel="noopener">鸣蜩二零</a></font></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/jsjwl/jsjwl0.jpg&quot; alt=&quot;加油&quot;&gt;&lt;br&gt;为韩立刚老师计算机网络课程学习笔记&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="//xueningyun.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="计算机网络" scheme="//xueningyun.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>数据结构笔记</title>
    <link href="//xueningyun.github.io/2020/04/09/sjjg/"/>
    <id>//xueningyun.github.io/2020/04/09/sjjg/</id>
    <published>2020-04-09T06:24:29.000Z</published>
    <updated>2020-04-21T05:13:40.915Z</updated>
    
    <content type="html"><![CDATA[<p>写在前面：个人学习笔记。<br><a id="more"></a></p><h3 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h3><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><p>描述客观事物的符号，是计算机可以 操作的对象，能被计算机识别和处理。（整形、声音、图像等）</p><h4 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h4><p>是组成数据的、与一定意义的基本单位，在计算机中通常作为整体处理。（如人类（数据）中，人就是数据元素）</p><h4 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h4><p>一个数据元素可以由若干个数据组成。是数据不可分割的最小单位。<br>如人这样的数据元素，有眼、口、鼻等数据项</p><h4 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h4><p>性质相同的数据元素的集合，是数据的子集。<br>如人都有姓名、生日等相同性质的数据项。</p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>不同数据元素之间存在的特定关系，称为结构。数据结构，是相互之间存在一种或多种特定关系的数据元素的集合。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/guanxi.png"></div><hr><h3 id="逻辑结构和物理结构"><a href="#逻辑结构和物理结构" class="headerlink" title="逻辑结构和物理结构"></a>逻辑结构和物理结构</h3><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h4><h5 id="集合结构"><a href="#集合结构" class="headerlink" title="集合结构"></a>集合结构</h5><p>各元素，同集合，平等，相互无关系</p><h5 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h5><p>数据元素一对一</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/xianxingjiegou.png"></div> <h5 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h5><p>一对多的层次关系</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/shuxingjiegou.png"></div> <h5 id="图形关系"><a href="#图形关系" class="headerlink" title="图形关系"></a>图形关系</h5><p>数据元素多对多</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/tuxingjiegou.png"></div> <h4 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h4><h5 id="顺序储存结构"><a href="#顺序储存结构" class="headerlink" title="顺序储存结构"></a>顺序储存结构</h5><p>数据元素存放在地址连续的存储单元里。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/sunxucunchu.png"></div> <h5 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h5><p>存储地址不连续，任意，需要指针存放地址。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/liansicunchu.png"></div> <hr><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h4><p>是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。<br>原子类型，结构类型。</p><h4 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h4><p>是指一个数据模型及定义在该模型上的一组操作。<br>对问题的分解、抽象，提取抽象的数学特征。</p><hr><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><h4 id="算法定义"><a href="#算法定义" class="headerlink" title="算法定义"></a>算法定义</h4><p>是解决特定问题求解步骤的描述。</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>五个基本特性：输入、输出、有穷性、确定性和可行性</p><h5 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h5><p>有零个或多个输入<br>至少一个或多个输出</p><h5 id="有穷性"><a href="#有穷性" class="headerlink" title="有穷性"></a>有穷性</h5><p>执行步骤有限，可在可接受时间内完成。</p><h5 id="确定性"><a href="#确定性" class="headerlink" title="确定性"></a>确定性</h5><p>算法的每一步骤都有具体的确定的含义。</p><h5 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h5><p>每一步都能执行完成，都可行。</p><h4 id="设计要求"><a href="#设计要求" class="headerlink" title="设计要求"></a>设计要求</h4><p>正确性，可读性，健壮性（当输入数据不合法时，算法也能做出合适处理），时间效率和储存量低。</p><h4 id="算法效率"><a href="#算法效率" class="headerlink" title="算法效率"></a>算法效率</h4><h5 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h5><p>语句总的执行次数T(n)是关于问题规模n的函数。T(n)=O(f(n))，f(n)为问题规模n的某个函数。<br>O()为大O记法，推导大O阶数：<br>1、用常数1取代运行时间中的所有加法常数。<br>2、只保留最高阶。<br>3、最高阶的系数改为1。</p><h6 id="常数阶"><a href="#常数阶" class="headerlink" title="常数阶"></a>常数阶</h6><p>执行时间恒定的算法，O(1)。</p><h6 id="线性阶"><a href="#线性阶" class="headerlink" title="线性阶"></a>线性阶</h6><p>O(n),即与n为线性函数。</p><h6 id="对数阶"><a href="#对数阶" class="headerlink" title="对数阶"></a>对数阶</h6><div align="center"><img width="86%" height="86%" src="/images/sjjg/duishujie.png"></div><br>执行次数，x=log2n，时间复杂度O(logn)。<br><br>###### 平方阶<br>时间复杂度O(n2),如下图：<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/pingfangjie.png"></div><br>常用时间复杂度排序如下：<br><div align="center"><img width="100%" height="100%" src="/images/sjjg/Tpaixu.png"></div> <h5 id="算法空间复杂度"><a href="#算法空间复杂度" class="headerlink" title="算法空间复杂度"></a>算法空间复杂度</h5><p>S(n)=O(f(n))，f(n)为语句关于n所占储存空间的函数。</p><hr><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><p>数据结构为线性的。</p><h4 id="线性表的顺序储存结构"><a href="#线性表的顺序储存结构" class="headerlink" title="线性表的顺序储存结构"></a>线性表的顺序储存结构</h4><p>指的是用一段地址连续的存储单元依次存储线性表的数据元素。</p><h4 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h4><h5 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h5><p>存储地址任意，哪里有空间就分配哪里，除了保存数据外，还需要保存后继元素的地址。<br>结点包含数据和指针。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/jiedian.png"></div><br>链表的第一个结点的储存位置叫做头指针，最后一个结点的指针为空。<br>单链表前的第一个结点前设一个结点，称为头结点，数据域部分一般无效。<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/toujiedian.png"></div><br><div align="center"><img width="86%" height="86%" src="/images/sjjg/touzhizhenyutoujiedian.png"></div><h5 id="单链表结构与顺序存储结构优缺点"><a href="#单链表结构与顺序存储结构优缺点" class="headerlink" title="单链表结构与顺序存储结构优缺点"></a>单链表结构与顺序存储结构优缺点</h5><div align="center"><img width="86%" height="86%" src="/images/sjjg/lianyusunyouquedian.png"></div><h5 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h5><p>用数组描述的链表叫做静态链表，数组元素由两个数据域组成，data和cur。data存放数据，游标cur相当于单链表中的next指针，存放该元素的后继在数组中的下标。整个链表为空时(下标为零的cur存放第一个空闲结点的下标)，如下图所示：</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/konglianbiao.png"></div><br>当静态链表存有元素时，如下图。首节点的cur为第一个空闲结点的下标，而最后一个结点的cur为第一个有值元素的下标为1，最后一个元素值的cur为0。<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/youzhijinlianbiao.png"></div><br>静态链表的插入<br>将插入元素放到第一个空闲节点处，而后修改cur值，插入到任意位置。如下图，将丙插入到乙、丁之间。<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/jingcharu.png"></div><br>静态链表的删除<br>将需要删除的结点的下标传给首节点的cur，而后删除。如下图，删除甲。<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/jingshanchu.png"></div><br>优缺点：<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/jingyouque.png"></div><h5 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h5><p>将尾指针指向头指针，用尾指针表示循环链表。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/xunhuanlianbiao.png"></div><h5 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h5><p>在单链表的每一个结点中，再设置一个指向其前驱结点的指针，即两个指针，一个指向后继，一个指向前驱，如下图。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/shuangxianglianbiao.png"></div><h4 id="线性表小结"><a href="#线性表小结" class="headerlink" title="线性表小结"></a>线性表小结</h4><div align="center"><img width="86%" height="86%" src="/images/sjjg/xianxingbiaoxiaojie.png"></div><hr><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><h4 id="栈的顺序存储结构"><a href="#栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构</h4><p>先进后出，最先进入的为栈底，最后存入的为栈顶。栈需规定最大长度，不可超出最大长度。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/zhandingyi.png"></div><h4 id="两栈共享空间"><a href="#两栈共享空间" class="headerlink" title="两栈共享空间"></a>两栈共享空间</h4><p>数组有两的端点，两个栈有两个栈底，让一个栈的栈底为数组的始端，即标记为0处，另一个栈的栈底为数组的末端，即数组长度n-1处。存入数据时，两栈顶向中间靠拢。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/shuangxiangzhan.png"></div><br>当两栈顶指针之间相差1时，即top1+1=top2为栈满。<br><br>#### 栈的链式存储结构<br>栈的链式存储结构，简称为链栈。<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/lianzhan.png"></div><br><div align="center"><img width="86%" height="86%" src="/images/sjjg/lianzhancx.png"></div><hr><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>只允许在一端进行插入操作，而在另一端进行删除操作的线性表。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/duilie.png"></div><br>front指针指向对头元素，rear指针指向队尾元素。<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/duilietou.png"></div><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><p>为克服顺序存储结构列表的缺陷（假溢出），把队列的头尾相接的顺序存储结构称为循环队列。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/xunhuanduilie.png"></div> <h4 id="队列的链式存储结构"><a href="#队列的链式存储结构" class="headerlink" title="队列的链式存储结构"></a>队列的链式存储结构</h4><p>队列的链式存储结构，其实就是线性表的单链表，只不过它只能尾进头出而已，简称为链队列。对头指针指向链队列的头结点，队尾指向终端节点。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/lianduilie.png"></div> <hr><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h4><p>一对多的数据结构，非空时，有根节点，子树个数不受限制，但一定互不相交。<br>结点拥有子树数称为节点的度，度为零的称为叶结点或终端结点，度不为零的称为分支节点，除根节点外，分支节点也称为内部结点。树的度为树内部结点的度的最大值。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/shudingyi.png"></div><br>树中结点的最大层次称为树的深度或高度。<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/shushendu.png"></div> <h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p>是n（n&lt;=0）个结点的有限集合，该集合或者为空集，或者由一个根节点和两颗互不相交的、分别称为根节点的左子树和右子树的二叉树组成。</p><h4 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h4><p>1、斜树<br>只有左子树的或者右子树的二叉树。<br>2、满二叉树<br>所有的分支节点都存在左子树和右子树，所有叶子都在同一层上。<br>3、完全二叉树<br>一颗具有n结点的二叉树按层序编号，如果编号i的结点与同样深度的满二叉树中的编号i的结点在二叉树的位置完全相同，则称为完全二叉树。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/wanquanerchashu.png"></div><br>完全二叉树的特点：<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/wanquantedian.png"></div> <h4 id="二叉树性质"><a href="#二叉树性质" class="headerlink" title="二叉树性质"></a>二叉树性质</h4><p>1、在二叉树的第i层至多有2^i-1^个结点（i&gt;0）。<br>2、深度为k的二叉树至多有2^k^-1个结点（k&gt;0）。<br>3、在任何一颗二叉树T，如果其终端结点数为n~0~，度为2的结点数为n~2~，则n~0~=n~2~+1。<br>4、具有n个结点的完全二叉树的深度为[log2n]+1([x]表示不大于x的最大整数)。<br>5、一颗完全二叉树，i=1，其为根节点，i&gt;1时，其双亲结点为[i/2];<br>2i&gt;n,则结点i无左孩子，否则左孩子结点为2i;<br>2i+1&gt;n，则结点i无右孩子，否则右孩子结点为2i+1。</p><h4 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h4><h5 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h5><p>二叉树非空时，先访问根节点，然后前序遍历左子树，再前序遍历右子树。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/qianxubianli.png"></div><h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><p>树非空时，从根结点开始（不是先访问根结点），中序遍历结点的左子树，然后访问根结点，最后中序遍历右子树。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/zhongxubianli.png"></div><h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><p>二叉树非空时，从左至右先叶子后结点的方式遍历访问左右子树，最后访问根结点。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/houxubianli.png"></div><h5 id="尾序遍历"><a href="#尾序遍历" class="headerlink" title="尾序遍历"></a>尾序遍历</h5><p>树非空时，从根结点开始访问，从上而下逐层遍历，由左向右。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/weixubianli.png"></div><h4 id="树、深林、二叉树的转换"><a href="#树、深林、二叉树的转换" class="headerlink" title="树、深林、二叉树的转换"></a>树、深林、二叉树的转换</h4><h5 id="树转二叉树"><a href="#树转二叉树" class="headerlink" title="树转二叉树"></a>树转二叉树</h5><p>1、加线。在所有兄弟结点之间加一条线。<br>2、去线。每个结点，只保留它与第一个孩子的连线，删掉它与其他孩子的连线。<br>3、层次调整。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/shutuerchashu.png"></div><h5 id="森林转二叉树"><a href="#森林转二叉树" class="headerlink" title="森林转二叉树"></a>森林转二叉树</h5><p>1、每棵树转成二叉树。<br>2、第一课二叉树不动，第二颗二叉树开始，依次把后一颗的二叉树的根结点作为前一颗二叉树的根结点的右孩子。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/sentuerchashu.png"></div><h4 id="赫夫曼树"><a href="#赫夫曼树" class="headerlink" title="赫夫曼树"></a>赫夫曼树</h4><p>构造最优赫夫曼树：<br>1、先把有权值的叶子结点按照从小到大的顺序排列成一个有序序列，如：A5，E10，B15,D30，C40。（A5表示A这个结点的权值为百分之5）。<br>2、取头两个最小权值的结点最为一个新结点的N~1~的两个子结点，相对较小的为左结点。新结点的权值为两叶子结点的和，如5+10=15。<br>3、将N~1~替代A、E，继续插入有序序列中，保持从小到大的顺序。即：N~1~15，B15，D30，C40。<br>4、2、3步骤，直至二叉树完成。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/hefuman1.png"></div><br><div align="center"><img width="86%" height="86%" src="/images/sjjg/hefuman2.png"></div><h5 id="赫夫曼编码"><a href="#赫夫曼编码" class="headerlink" title="赫夫曼编码"></a>赫夫曼编码</h5><p>假设六个字母的频率为A27，B8，C15，D15，E30，F5，用赫夫曼树重新规划它们。<br>然后将得到的赫夫曼树，将权值左分支改为0，右分支改为1。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/hefumanbianma.png"></div><br>则编码可变为：<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/bianmahou.png"></div><hr><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>多对多，G（V,E），G表示一个图，V是图G的顶点集合，E是图G中边的集合。</p><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><p><strong>无向图和有向图</strong><br>图按照有无方向分为有向图和无向图。无向图由顶点和边构成，有向图由顶点和弧构成。<br>弧有弧尾和弧头之分。连接顶点A到D的有向边就是弧，A是弧尾，D是弧头，&lt;A,D&gt;表示弧。<br>无向边用小括号“（）”表示，有向边用“&lt;&gt;”表示。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/youwuxiangtu.png"></div><p><strong>完全图</strong><br>按边或弧的多少分为稀疏图和稠密图。如果任意两个顶点之间都存在边叫完全图，有向的叫有向完全图。若无重复的边或顶点到自身的边则叫简单图。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/wanquantu.png"></div><p><strong>度</strong><br>无向图顶点的边数叫做度，有向图顶点的分为入度和出度。</p><p><strong>网</strong><br>图上的边或弧上带权则称为网。</p><p><strong>连通分量</strong><br>顶点间存在路径，两顶点间存在路径说明是连通的，如果路径最终回到起点则称为环，当中不重复的叫做简单路径。<br>任意两顶点都是连通的，叫做连通图，有向则称为强连通图。<br>图中有子图，若子图极大连通则就是连通分量，有向就是强连通分量。</p><h4 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h4><h5 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h5><p>一个一维数组存储图中顶点信息，一个二维数组(称为邻接矩阵)存储图中的边或弧的信息。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/lingjiejuzhen.png"></div><br>有权值的，有向图，即网。<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/wanglingjiejuzhen.png"></div><h5 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h5><p>一个一维数组存储图中顶点信息，每个顶点vi的邻接点构成一个线性表，由于邻接点数不确定，用单链表存储，无向图称为顶点vi的边表，有向图则称为顶点vi作为弧尾的出边表。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/linjiebiao.png"></div><br><div align="center"><img width="86%" height="86%" src="/images/sjjg/youxianglinjiebiao.png"></div><h5 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a>十字链表</h5><p>将邻接表和逆邻接表结合起来。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/shizilianbiao.png"></div><h5 id="邻接多重表"><a href="#邻接多重表" class="headerlink" title="邻接多重表"></a>邻接多重表</h5><div align="center"><img width="86%" height="86%" src="/images/sjjg/linjieduochongbiao.png"></div><h5 id="边集数组"><a href="#边集数组" class="headerlink" title="边集数组"></a>边集数组</h5><p>由两个一维数组构成，一个存储顶点信息，另一个存储边的信息，由一条边的起点下标和终点下标、权值构成。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/bianjishuzu.png"></div><h4 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h4><h5 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h5><p>也称为深度优先搜索，简称DFS。<br>从图中某个顶点V出发，访问此顶点，然后从该顶点的未访问的邻接点出发深度优先遍历图，直至图中所有和V有路径相通的顶点都被访问到。若图中有顶点未被访问，则在另选图中一个未曾访问的顶点作起始点，重复上述过程。</p><h5 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h5><p>广度优先搜索，简称BFS。<br>将图分层，一层层访问。</p><h4 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h4><p>构造连通网的最小代价生成树称为最小生成树。</p><h5 id="普里姆（Prim）算法"><a href="#普里姆（Prim）算法" class="headerlink" title="普里姆（Prim）算法"></a>普里姆（Prim）算法</h5><p>先构造图的邻接矩阵。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/prim1.png"></div><br>1、将顶点V0代入，及其相连的边，即邻接矩阵的第0行代入边数组。<br>2、找出此时权值最小的边，并打印出来，并将打印的边权值设为0，表示该顶点k已完成任务。<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/prim2.png"></div><br>3、将第k行代入边数组，代入条件，小于原数组相对应的值，则代入。<br>4、重复2、3步骤，直至打印最小生成树完成。<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/prim3.png"></div><br><div align="center"><img width="86%" height="86%" src="/images/sjjg/prim4.png"></div><br><div align="center"><img width="86%" height="86%" src="/images/sjjg/prim5.png"></div><h5 id="克鲁斯卡（Kruskal）算法"><a href="#克鲁斯卡（Kruskal）算法" class="headerlink" title="克鲁斯卡（Kruskal）算法"></a>克鲁斯卡（Kruskal）算法</h5><p>先构造图的边集数组，并从大到小排序。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/kruskal1.png"></div><br>1、用一个数组p来保存边与边是否形成环路，初始值都赋为0。<br>2、判断即将打出的边是否形成环路，即判断一条边的起点和终点是否相同，如果不同则将该边顶点的终点值保存到对应的p[n]中。<br>3、打印此边。<br>4、重复2、3步骤，直至打印最小生成树完成。<br><br>####  最短路径<br>图中，两顶点间最短的距离。<br><br>##### 迪杰斯特拉（Dijkstra）算法<br>先构造图的邻接矩阵。<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/dijkstra1.png"></div><br>1、定义一个数组final，初始化为0，若起点V0到某顶点w已经求得最短路径，则将final[w]标记为1，将邻接矩阵第一行的数据代入到数组D[]中，即各顶点到起点V0的距离。<br>2、找出数组D[]中最小的值，并将该顶点k的final[k]标记设为1，表示以求得该点的最短路径，该点以后不再参与处理。<br>3、以起点到k点为基础，向与k点相连的顶点扩散，并计算到个相连顶点的距离，若距离小于原数组D[]中对应的值，则替换数组D[]对应的值。<br>4、重复2、3步骤，直至求出到终点的最小距离。<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/dijkstra2.png"></div><h5 id="弗洛伊德（Floyd）算法"><a href="#弗洛伊德（Floyd）算法" class="headerlink" title="弗洛伊德（Floyd）算法"></a>弗洛伊德（Floyd）算法</h5><p>先构造图的原始邻接数组和先驱数组（即要到该顶点，最短路径需经过的上一个顶点下标）。</p><div align="center"><img width="86%" height="86%" src="/images/sjjg/floyd1.png"></div><br>1、先初始化邻接数组D[]和先驱数组P[]，D[]直接为邻接矩阵，P[]为该顶点下标。<br>2、执行三重嵌套，第一层k代表中转顶点下标（若k为1，则代表所有的点都需要由顶点1转发），第二层V代表起始顶点，第三层W代表结束终点。<br>3、嵌套里，如果经k顶点转发小于原数组D[]对应的值，则替换更新，并将先驱数组更新。<br><div align="center"><img width="86%" height="86%" src="/images/sjjg/floyd2.png"></div><hr><h3 id="查找、排序"><a href="#查找、排序" class="headerlink" title="查找、排序"></a>查找、排序</h3><p>该部分由详细讲解，见文章“查找算法”、“排序算法”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在前面：个人学习笔记。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="//xueningyun.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="编程" scheme="//xueningyun.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="数据结构" scheme="//xueningyun.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C语言笔记</title>
    <link href="//xueningyun.github.io/2020/04/07/C/"/>
    <id>//xueningyun.github.io/2020/04/07/C/</id>
    <published>2020-04-07T14:46:29.000Z</published>
    <updated>2020-04-15T15:56:37.376Z</updated>
    
    <content type="html"><![CDATA[<p>写在前面：个人学习笔记。<br><a id="more"></a></p><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><p>非(!)&gt;算术运算符(+、-、*、/、%…)&gt;关系运算符(&lt;、&gt;、==、!=…)&gt;&amp;&amp;&gt;||&gt;条件运算符((a&lt;b)?a:b)&gt;赋值运算符(=)&gt;逗号运算符(,)</p><h4 id="printf函数格式字符"><a href="#printf函数格式字符" class="headerlink" title="printf函数格式字符"></a>printf函数格式字符</h4><p>“-”表示输出的数字或者字符在域内向左靠</p><h4 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h4><p>用于指定新的类型名来代替已有的类型名。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在前面：个人学习笔记。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="//xueningyun.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C语言" scheme="//xueningyun.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="编程" scheme="//xueningyun.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>FFT简述</title>
    <link href="//xueningyun.github.io/2019/03/13/FFT/"/>
    <id>//xueningyun.github.io/2019/03/13/FFT/</id>
    <published>2019-03-13T12:46:29.000Z</published>
    <updated>2020-04-15T15:56:25.934Z</updated>
    
    <content type="html"><![CDATA[<p>写在前面：水平有限，经供参考。<br><a id="more"></a></p><p>FFT原理：<br>快速傅里叶变换（FFT）是离散傅里叶变换（DFT）的一种快速算法，而不是一种新的变换，在数量级上大大提高了运算速度。<br>现设x(n) 是长度为N 的有限长序列（即相当于ADC采集时域信号的点集），X(k)为转换得到的频域序列（相当于信号各频率分量的点集），其DFT定义如下：</p><p>整个DFT运算需要 次复数相乘和 次复数相加。当N很大时，会形成很大的运算量。FFT算法是通过把长序列的DFT分解成短序列的DFT，并利用旋转因子 的周期性、可约性和共轭对称性来减少DFT的运算量。<br>利用 上述特性，若序列点数 ，L为正整数，将一个N点DFT分解为两个N/2点DFT（按n的奇偶分组），有L层蝶形，一个蝶形运算包含一次复数乘法运算和两次复数加法运算，见图1。基-2FFT算法复数相乘次数减少为 ,复数相加次数减少为 ，大大减少运算量。（此处未给出公式推导，有兴趣见《数字信号处理》）</p><p>算法应用：<br>每个FFT信号采集点都为一个复数，设为 ，其中 为信号实部（ADC采集值）， 为信号虚部（设为零）。实部与虚部的模值为幅值，即   。每个FFT信号采集点就对应着一个频率点，某一点n(n从1开始，且n≠1)表示的频率为：</p><p>其中 为采样频率（ADC采样频率）， 为第n点的频率（转换得到频域序列的第n点），N为采样点数，Fs/N为频率分辨率。<br>频域第n点对应的幅值为原信号该频率分量（ ）对应的幅值，FFT变换后得到信号的幅值 变为原幅值（时域）的 倍；但n=1的频点为直流分量，幅值为N倍。FFT结果具有对称性，即前一半的结果与后一半对称相等，所以只保留前一半的结果作为被测信号的频谱。（详细理论推导见《数字信号处理》）<br>ADC采样频率 由定时器精确控制，使用定时器定时触发ADC采样，采样值装入FFT输入数组。关键代码配置如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define FFT_LENGTH<span class="number">1024</span> <span class="comment">//FFT长度，1024点FFT</span></span><br><span class="line">extern <span class="built_in">float</span> fft_inputbuf[FFT_LENGTH*<span class="number">2</span>];<span class="comment">//FFT输入数组</span></span><br><span class="line">extern <span class="built_in">float</span> fft_outputbuf[FFT_LENGTH];<span class="comment">//FFT输出数组</span></span><br><span class="line">u32 AMPL[FFT_LENGTH/<span class="number">2</span>+<span class="number">1</span>];      <span class="comment">//储存FFT输出的幅值转化为整数</span></span><br><span class="line">TIM3_Int_Init(<span class="number">40</span>,<span class="number">1</span>); <span class="comment">//定时器时钟84M，分频系数1（即84Mhz的计数频率），计数40次，即ADC的采样频率为1.024M</span></span><br><span class="line">arm_cfft_radix4_init_f32(&amp;scfft,FFT_LENGTH,<span class="number">0</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>//初始化scfft结构体，设定FFT相关参数：<br>第一个参数“FFT_LENGTH”为FFT长度；<br>第二个参数“0”表示FFT（“1”表示IFFT）；<br>第三个参数表示是否按位取反;</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arm_cfft_radix4_f32(<span class="name">&amp;scfft</span>,fft_inputbuf)<span class="comment">;//FFT计算（基4）</span></span><br><span class="line">arm_cmplx_mag_f32(<span class="name">fft_inputbuf</span>,fft_outputbuf,FFT_LENGTH)<span class="comment">;//把运算结果复数求模得幅值</span></span><br><span class="line">for(<span class="name">i=0</span><span class="comment">;i&lt;FFT_LENGTH/2;i++)\'</span></span><br><span class="line">&#123;</span><br><span class="line">&gt;&gt;AMPL[i]=(<span class="name">u32</span>)(<span class="name">fft_outputbuf</span>[i]/1024)*8;     //得到峰峰值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ADC、定时器部分配置代码：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;<span class="comment">//12位模式</span></span><br><span class="line">ADC_InitStructure.ADC_ScanConvMode = DISABLE;<span class="comment">//不使用扫描模式</span></span><br><span class="line">ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;<span class="comment">//不使用连续转换</span></span><br><span class="line">ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T3_TRGO;<span class="comment">//定时器TRGO触发</span></span><br><span class="line">TIM_SelectOutputTrigger(TIM3,TIM_TRGOSource_Update);//使用TIM3事件更新作为ADC触发</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在前面：水平有限，经供参考。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="//xueningyun.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="FFT" scheme="//xueningyun.github.io/tags/FFT/"/>
    
      <category term="数字信号处理" scheme="//xueningyun.github.io/tags/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>晶振电路概述</title>
    <link href="//xueningyun.github.io/2019/03/13/COC/"/>
    <id>//xueningyun.github.io/2019/03/13/COC/</id>
    <published>2019-03-13T12:46:29.000Z</published>
    <updated>2020-04-20T08:37:06.743Z</updated>
    
    <content type="html"><![CDATA[<p>写在前面：本文参考资料大多数来自于TI官网，结合笔者实际在制作经验所写。水平有限，欢迎指正。<br><a id="more"></a></p><p>晶振典型应用电路如下图：</p><div align="center"><img width="70%" height="70%" src="/images/COC/COC_0.png"></div><br>电路有晶振、反相器、反馈电阻（RF）、隔离电阻（Rs）和两个补偿电容组成。其中，RF是CMOS反相器的反馈电阻，它将反相器偏置在其线性区域.RF的选择值足够大，因此可以匹配反相器和晶体的输入阻抗。通常，选择的值介于1MΩ和10MΩ之间。RS将晶体管的输出与晶振隔离开来，防止杂散的高频振荡，从而获得干净的波形。RS的最佳值取决于操作频率和所需的稳定性。其最小值取决于晶振的建议功耗，晶体制造商通常在晶振数据表中指定RS的推荐值。使用低于晶振数据表中的值可能会导致晶振过驱动，从而导致晶体损坏或缩短晶振寿命。具体情况具体选值，一般取值在3k欧姆左右。Rs取值较小时，输出波形幅值较大，但过于小会出现冲击现象。如下图：<br><div align="center"><img width="70%" height="70%" src="/images/COC/COC_1.png"></div><br>RL为负载电阻。<br>C1、C2为补偿电容。RS和C2形成低通滤波器并减少寄生振荡。<br>基于所需的截止频率调节参数。 选择C2的另一个因素是启动时间。对于反相器，有时C2会比C1略大有助于启振，但C1应该在一个限制内，使得引入晶体的负载电容不超过制造商建议的值CL。否则，共振频率将改变。C1、C2一般取值在几十pf。<br>另外，实际应用时，为改善输出波形，可在反相器的输出端再加一个反相器。如下图：<br><div align="center"><img width="70%" height="70%" src="/images/COC/COC_2.png"></div> ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在前面：本文参考资料大多数来自于TI官网，结合笔者实际在制作经验所写。水平有限，欢迎指正。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="//xueningyun.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="晶振" scheme="//xueningyun.github.io/tags/%E6%99%B6%E6%8C%AF/"/>
    
      <category term="射频" scheme="//xueningyun.github.io/tags/%E5%B0%84%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>手机拍照</title>
    <link href="//xueningyun.github.io/2019/02/12/Phone_photo/"/>
    <id>//xueningyun.github.io/2019/02/12/Phone_photo/</id>
    <published>2019-02-12T07:00:00.000Z</published>
    <updated>2020-04-20T08:41:57.950Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Phone_photo/11.jpg" alt="phone"><br>突出主题，色彩协调，画面简洁。<br><a id="more"></a></p><h3 id="构图"><a href="#构图" class="headerlink" title="构图"></a>构图</h3><p>构图可参照参考线（手机拍照都有），有九宫图（最常用）、黄金比例、左右螺旋等。如下图：</p><div align="center"><img width="98%" height="%" src="/images/Phone_photo/1.jpg"></div><div align="center"><img width="98%" height="%" src="/images/Phone_photo/2.png"></div><div align="center"><img width="98%" height="%" src="http://www.pujinwenhua.com/inc/FileUpLoad/UpLoadPicFile/05.jpg"></div><div align="center"><img width="98%" height="%" src="/images/Phone_photo/3.jpg"></div><div align="center"><img width="98%" height="%" src="/images/Phone_photo/4.jpg"></div><p>画面的水平线置于等分或二等分线上，如下图：</p><div align="center"><img width="98%" height="%" src="/images/Phone_photo/5.jpg"></div><div align="center"><img width="98%" height="%" src="/images/Phone_photo/6.png"></div><div align="center"><img width="98%" height="%" src="/images/Phone_photo/7.png"></div><p>对称，如下图：</p><div align="center"><img width="98%" height="%" src="http://imglf1.ph.126.net/wm8TuAzZbjfTyIvaOvz31Q==/1468736428576343248.jpg"></div><div align="center"><img width="98%" height="%" src="http://www.zhiyinmedia.com/uploads/allimg/180126/4-1P126100106201.png"></div><p>对角线，如下图：</p><div align="center"><img width="98%" height="%" src="/images/Phone_photo/8.jpg"></div><div align="center"><img width="98%" height="%" src="https://i1.wp.com/pic1.zhimg.com/50/6e321aa26f7048700063b81f028b8d74_hd.jpg"></div><p>汇聚线，如下图：</p><div align="center"><img width="98%" height="%" src="/images/Phone_photo/9.png"></div><div align="center"><img width="98%" height="%" src="/images/Phone_photo/10.png"></div><p>巧用洞口、窗口等构景，如下图：</p><div align="center"><img width="98%" height="%" src="/images/Phone_photo/11.jpg"></div><div align="center"><img width="98%" height="%" src="http://ugc.qpic.cn/gbar_pic/glrmvMO9Eic2G4rwK04giarHUiaSschFbsRmFh4tF7jqdV54MVOx8IG0w/0"></div><p>将主题眼睛放置在画面中央，如下图：</p><div align="center"><img width="98%" height="%" src="/images/Phone_photo/12.png"></div><div align="center"><img width="98%" height="%" src="/images/Phone_photo/13.png"></div><p>拍花的构图，有对角、三点式等，如下图：</p><div align="center"><img width="98%" height="%" src="https://image.photoworld.com.cn/wp-content/uploads/2018/04/10-4-640x393.jpg"></div><h3 id="协调简洁"><a href="#协调简洁" class="headerlink" title="协调简洁"></a>协调简洁</h3><p>简洁干净</p><div align="center"><img width="98%" height="%" src="/images/Phone_photo/14.jpg"></div><p>前景与后景的配合</p><div align="center"><img width="98%" height="%" src="/images/Phone_photo/15.jpg"></div><p>对焦，下图对焦在窗外</p><div align="center"><img width="98%" height="%" src="/images/Phone_photo/16.jpg"></div><p>曝光，简单来说，照片偏亮，就对焦在图片上偏亮的地方；如果偏暗，就对焦在偏暗的地方。如下图：</p><div align="center"><img width="98%" height="%" src="/images/Phone_photo/17.jpg"></div><p>虚实结合</p><div align="center"><img width="98%" height="%" src="/images/Phone_photo/18.jpg"></div><div align="center"><img width="98%" height="%" src="/images/Phone_photo/19.jpg"></div><blockquote><p>参考资料</p></blockquote><ul><li><font color="black" size="4">掌握这6个手机摄影小技巧，让你优雅地发朋友圈 <a href="https://zhuanlan.zhihu.com/p/20887599" target="_blank" rel="noopener">zhihu</a></font></li><li><font color="black" size="4">摄影小白花了一个月整理出这篇干货文章 <a href="https://zhuanlan.zhihu.com/p/54462338?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=963835563962593280" target="_blank" rel="noopener">zhihu</a></font></li><li><font color="black" size="4">知乎日报 <a href="http://daily.zhihu.com/story/3584755" target="_blank" rel="noopener">zhihu</a></font></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/Phone_photo/11.jpg&quot; alt=&quot;phone&quot;&gt;&lt;br&gt;突出主题，色彩协调，画面简洁。&lt;br&gt;
    
    </summary>
    
      <category term="凡间角落" scheme="//xueningyun.github.io/categories/%E5%87%A1%E9%97%B4%E8%A7%92%E8%90%BD/"/>
    
    
      <category term="拍照" scheme="//xueningyun.github.io/tags/%E6%8B%8D%E7%85%A7/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记</title>
    <link href="//xueningyun.github.io/2019/01/19/study_notes/"/>
    <id>//xueningyun.github.io/2019/01/19/study_notes/</id>
    <published>2019-01-19T02:15:29.000Z</published>
    <updated>2020-04-20T08:22:37.743Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/study_notes/xiaowangzi.jpg" alt="小王子"><br>读书笔记，收录书单。<br><a id="more"></a></p><h3 id="小王子"><a href="#小王子" class="headerlink" title="小王子"></a>小王子</h3><div align="center"><img width="81%" height="81%" src="https://upload.wikimedia.org/wikipedia/zh/thumb/0/05/Littleprince.JPG/220px-Littleprince.JPG"></div><blockquote><p>《小王子》看过三次。</p></blockquote><blockquote><p>第一次看的时候，印象最深的是小王子旅途遇到的那些“大人”。<br>“大人真怪。”“大人们喜欢数字。你跟他们谈起一位朋友，他们绝不会问你这位新朋友的基本情况。他们不会问你：他说起话来声音好不好听啊？他喜欢玩什么游戏啊？他收不收集蝴蝶啊？他们只会问你：他多大年纪了？他有几个兄弟？他有多重啊？他父亲赚多少钱啊？只有在了解了这些情况后，他们才以为了解他了。如果你对大人们说：我看到栋很漂亮的房子，玫瑰红的砖，窗口种着天竺葵，屋顶上还有鸽子……他们想像不出那栋房子是什么样儿的。你得对他们说：我看到一栋价值十万法郎的房子。他们才会嚷嚷：那栋房子多漂亮啊！”<br>大人们迷恋权力、爱慕虚荣、利益熏心等等，讨厌并不想成为这样的“大人”。</p></blockquote><blockquote><p>再次看的时候，对文中的“小王子“与”玫瑰”感触很深。<br>她已经精细地做了那么长的准备工作，却打着哈欠说道：“我刚刚睡醒，真对不起，瞧我的头发还是乱蓬蓬的……”小王子这时再也控制不住自己的爱慕心情：“你是多么美丽啊！”花儿悠然自得地说：“是吧，我是与太阳同时出生的……”小王子看出了这花儿不太谦虚，可是她确实丽姿动人。<br>花儿咳嗽了一阵。但并不是由于感冒。她终于对他说道：“我方才真蠢。请你原谅我。希望你能幸福。” 花儿对他毫不抱怨，他感到很惊讶。他举着罩子，不知所措地伫立在那里。 他不明白她为什么会这样温柔恬静。 “的确，我爱你。”花儿对他说道：“但由于我的过错，你一点也没有理会。 这丝毫不重要。不过，你也和我一样的蠢。希望你今后能幸福。把罩子放在一边吧，我用不着它了。”“要是风来了怎么办？”“我的感冒并不那么重……夜晚的风对我有益。”“要是有虫子野兽呢？……”“我要是想认识蝴蝶，经不起两三只毛毛虫是不行的。据说这是很美的。不然还有谁来看我呢？你就要到远处去了。至于说大动物，我并不怕，我有爪子。”于是，她天真地显露出她那四根刺，随后又说道：“别这么磨蹭了。真烦人！你既然决定离开这儿，那么，快走吧！”她是怕小王子看见她在哭。她是一朵非常骄傲的花……<br>“我太年轻了，甚至不懂怎么去爱她。”</p></blockquote><blockquote><p>第三次看的时候，有了很多不一样的想法，对文中的“狐狸”有了全新的认识。<br>“再见。”狐狸说。“喏，这就是我的秘密。很简单：只有用心才能看得清。 实质性的东西，用眼睛是看不见的。”“实质性的东西，用眼睛是看不见的。”小王子重复着这句话，以便能把它 记在心间。“正因为你为你的玫瑰花费了时间，这才使你的玫瑰变得如此重要。”“正因为你为你的玫瑰花费了时间……”小王子又重复着，要使自己记住这些。“人们已经忘记了这个道理，”狐狸说，“可是，你不应该忘记它。你现在要对你驯服过的一切负责到底。你要对你的玫瑰负责……”“我要对我的玫瑰负责……”小王子又重复着……<br>狐狸教会了小王子“驯养”，让小王子明白驯养了就要对其负责。小王子学会了如何去爱。<br>“你们很美，但你们是空虚的。”小王子仍然在对她们说，“没有人能为你们去死。当然啰，我的那朵玫瑰花，一个普通的过路人以为她和你们一样。可是，她单独一朵就比你们全体更重要，因为她是我浇灌的。因为她是我放在花罩中的。因为她是我用屏风保护起来的。因为她身上的毛虫（除了留下两三只为了变蝴蝶而外）是我除灭的。因为我倾听过她的怨艾和自诩，甚至有时我聆听着她的沉默。因为她是我的玫瑰。”</p></blockquote><blockquote><p>最喜欢的一本书，以后还会再看，该会有不一样的感受。</p></blockquote><h3 id="追风筝的人"><a href="#追风筝的人" class="headerlink" title="追风筝的人"></a>追风筝的人</h3><div align="center"><img width="81%" height="81%" src="https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=ec81f93c4f086e066aa8384d3a331cc9/9358d109b3de9c8285409c826f81800a19d84391.jpg"></div><blockquote><p>为你，千千万万遍。</p></blockquote><blockquote><p>得到了再失去，总是比从来就没有得到更伤人。</p></blockquote><blockquote><p>文字风格，简单通俗，很喜欢。</p></blockquote><h3 id="草房子"><a href="#草房子" class="headerlink" title="草房子"></a>草房子</h3><div align="center"><img width="81%" height="81%" src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=8cc1ba80d662853592e0d527a8d411fb/8718367adab44aed39e27e96b01c8701a18bfb10.jpg"></div><blockquote><p>简单的东西最感人</p></blockquote><blockquote><p>唯一一部看哭的小说</p></blockquote><h3 id="暗时间"><a href="#暗时间" class="headerlink" title="暗时间"></a>暗时间</h3><div align="center"><img width="81%" height="81%" src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=46094141a6c27d1ea5263cc223eeca53/c8ea15ce36d3d5392436fc263887e950342ab0c8.jpg"></div><blockquote><p>作者是一个喜欢写东西的程序员，自己写博客是受他的影响。</p></blockquote><blockquote><p>《暗时间》带有工科的气息，但通俗易懂。里面贯穿了很多心理学的东西，还有一些数学知识。很理性，对战胜自己的惰性、逃离“舒适区”、有效、兴趣的学习很有帮助。</p></blockquote><h3 id="解忧杂货店"><a href="#解忧杂货店" class="headerlink" title="解忧杂货店"></a>解忧杂货店</h3><div align="center"><img width="81%" height="81%" src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=8b194727aa44ad342ebf8081e8996bc9/4afbfbedab64034f62ca27cca4c379310b551df0.jpg"></div><blockquote><p>很温馨。</p></blockquote><h3 id="浪潮之巅"><a href="#浪潮之巅" class="headerlink" title="浪潮之巅"></a>浪潮之巅</h3><div align="center"><img width="81%" height="81%" src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=f0f9784433c79f3d8fe1e336829aaa2c/6a63f6246b600c33be80e373124c510fd8f9a18b.jpg"></div><blockquote><p>文章讲解了整个IT界的发展，没有涉及太多专业知识，普通人也能看的懂。<br>谷歌为什么能成为世界上最强的科技公司，苹果的“I十年”，摩尔定律……看完都会答案。</p></blockquote><h3 id="数学之美"><a href="#数学之美" class="headerlink" title="数学之美"></a>数学之美</h3><div align="center"><img width="81%" height="81%" src="https://pic.mofans.net/uploadfile/book/201808/9787115373557.jpg"></div><blockquote><p>学计算机的学生，看完受益匪浅。</p></blockquote><h3 id="活着"><a href="#活着" class="headerlink" title="活着"></a>活着</h3><div align="center"><img width="81%" height="81%" src="http://5b0988e595225.cdn.sohucs.com/images/20180928/7f1b898e43ba40d6a8f375dfc24bd529.jpeg"></div><blockquote><p>好好活着，不需要为什么。</p></blockquote><h3 id="爱的艺术"><a href="#爱的艺术" class="headerlink" title="爱的艺术"></a>爱的艺术</h3><div align="center"><img width="81%" height="81%" src="https://upload-images.jianshu.io/upload_images/1050560-c529bac1928f8275.JPEG?imageMogr2/auto-orient/strip%7CimageView2/2/w/600/format/webp"></div><blockquote><p>心理学书籍</p></blockquote><h3 id="人性的优点"><a href="#人性的优点" class="headerlink" title="人性的优点"></a>人性的优点</h3><div align="center"><img width="81%" height="81%" src="https://p1.ssl.qhmsg.com/dr/270_500_/t01361fd6afbeac18c4.png?size=268x376"></div><blockquote><p>心理学书籍</p></blockquote><h3 id="人性的弱点"><a href="#人性的弱点" class="headerlink" title="人性的弱点"></a>人性的弱点</h3><div align="center"><img width="81%" height="81%" src="http://cbu01.alicdn.com/img/ibank/2016/460/216/3278612064_1382082188.jpg"></div><blockquote><p>心理学书籍</p></blockquote><h3 id="目送"><a href="#目送" class="headerlink" title="目送"></a>目送</h3><div align="center"><img width="81%" height="81%" src="https://easyreadfs.nosdn.127.net/QdDYazSrbQe4xd3D6Huwkw==/8796093024591080300"></div><blockquote><p>我慢慢地、慢慢地了解到，所谓父女母子一场，只不过意味着，你和他的缘分就是今生今世不断地在目送他的背影渐行渐远。你站在小路的这一端，看着他逐渐消失在小路转弯的地方，而且，他用背影默默告诉你：不必追。</p></blockquote><h3 id="白夜行"><a href="#白夜行" class="headerlink" title="白夜行"></a>白夜行</h3><div align="center"><img width="81%" height="81%" src="http://img12.360buyimg.com/n1/jfs/t7156/341/1240395502/436688/877c5f55/598946baN4821811a.jpg"></div><blockquote><p>我的天空没有太阳，总是黑夜，但并不暗，因为有东西代替了太阳。虽然没有太阳那么明亮，但对我来说已经足够。凭借这份光，我便能把黑夜当成白天。我从来就没有太阳，所以不怕失去。<br>若生如雪穗，汝又当如何？<br>亮以后，雪无光</p></blockquote><h3 id="别做正常的傻瓜"><a href="#别做正常的傻瓜" class="headerlink" title="别做正常的傻瓜"></a>别做正常的傻瓜</h3><div align="center"><img width="81%" height="81%" src="https://p1.ssl.qhmsg.com/dr/270_500_/t01d931fe3302f9e50f.jpg"></div><blockquote><p>你正常吗？也许是的。你傻吗？也许也是的。“正常”的决策者往往做着“傻瓜”的决策，而他们自己还蒙在鼓里。这些傻的错误在许多决策中会出现，包括购物、投资、用人、择偶等。</p></blockquote><h3 id="乖，摸摸头"><a href="#乖，摸摸头" class="headerlink" title="乖，摸摸头"></a>乖，摸摸头</h3><div align="center"><img width="81%" height="81%" src="https://s.doubanio.com/lpic/s27466554.jpg"></div><blockquote><p>大冰作品，读起来很轻松、舒服。轻松俏皮的句子，承包了我一整天的笑容。</p></blockquote><blockquote><p>读完，对民谣，多了一些“理解”、“懂”，对赵雷的歌和人的认识，更加立体。</p></blockquote><h3 id="看见"><a href="#看见" class="headerlink" title="看见"></a>看见</h3><div align="center"><img width="81%" height="81%" src="http://i3.sinaimg.cn/dy/m/2012-12-11/U2004P1T1D25783194F21DT20121211110506.jpg"></div><blockquote><p>喜欢的第一个女孩，送的第一本书，就是《看见》。</p></blockquote><blockquote><p>事情并不是非黑即白的，没那么对立，有很多“交集纠缠”。文章温润、客观。</p></blockquote><h3 id="月亮与六便士"><a href="#月亮与六便士" class="headerlink" title="月亮与六便士"></a>月亮与六便士</h3><div align="center"><img width="81%" height="81%" src="http://img14.360buyimg.com/n1/jfs/t29212/123/324125359/68070/fbb01e90/5bef7fb8Nd7086bf7.jpg"></div><blockquote><p>月亮代表的是梦想、远方、赤诚之心、爱与正义，六便士代表的是现实、束缚、物资、肉欲和世俗。</p></blockquote><blockquote><p>能找到自己方向，并追随的人，是很幸运的，因为他们走在满地都是六便士的街道，抬头便看到了月亮。</p></blockquote><h3 id="暖心小栈"><a href="#暖心小栈" class="headerlink" title="暖心小栈"></a>暖心小栈</h3><p>“叔叔那是假的吗？”<br>“你喜欢吗？”<br>“喜欢”<br>“喜欢，它就是真的。”<br>这段对话来自马伯庸的《古董局中局》。<br>小五带着小女儿不小心弄坏了路边小贩的古董，被对方敲诈。许挺身而出，证明那个古董是赝品，为父子两解了围。单纯的小女孩没法接收成人世界里这种赤裸裸的谎言，一边哭，一边问出了上面那段话。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/study_notes/xiaowangzi.jpg&quot; alt=&quot;小王子&quot;&gt;&lt;br&gt;读书笔记，收录书单。&lt;br&gt;
    
    </summary>
    
      <category term="凡间角落" scheme="//xueningyun.github.io/categories/%E5%87%A1%E9%97%B4%E8%A7%92%E8%90%BD/"/>
    
    
      <category term="读书笔记" scheme="//xueningyun.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>NE564</title>
    <link href="//xueningyun.github.io/2019/01/19/NE564/"/>
    <id>//xueningyun.github.io/2019/01/19/NE564/</id>
    <published>2019-01-19T02:13:29.000Z</published>
    <updated>2020-04-20T08:19:01.030Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/NE564/ti.jpg" alt="ti"><br>仅供参考，应用时请仔细阅读英文数据手册</p><a id="more"></a><center>NE564-锁相环</center><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>NE / SE564是一款多功能，高保证频率的锁相环，设计工作频率高达50MHz。 如框图所示，NE / SE564由VCO，限幅器，鉴相器和后检波处理器组成。</p><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li>采用5V单电源供电</li><li>TTL兼容的输入和输出</li><li>保证运行至50MHz</li><li>外部环路增益控制</li><li>减少载波馈通</li><li>FSK应用是不需要精密滤波</li><li>可用作调制器</li><li>可变环路增益（外部控制）</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>高速调制解调器</li><li>FSK接收器和发射器</li><li>频率合成器</li><li>信号发生器</li><li>各种卫星通信/电视系统</li><li>引脚配置<div align="center"><img width="70%" height="70%" src="/images/NE564/NE564_0.png"></div><br><div align="center"><img width="86%" height="86%" src="/images/NE564/NE564_1.png"></div><br>绝对最大额定值<br><div align="center"><img width="86%" height="86%" src="/images/NE564/NE564_2.png"></div><br>注意：高于5V的操作将需要对壳体进行散热。<br>直流和交流电气特性<br>VCC = 5V; TA = 0 to 25°C; fO = 5MHz, I2 = 400mA; 除非另有规定<br><div align="center"><img width="86%" height="86%" src="/images/NE564/NE564_3.png"></div><br><div align="center"><img width="86%" height="86%" src="/images/NE564/NE564_4.png"></div><br>典型的性能特征<br><div align="center"><img width="86%" height="86%" src="/images/NE564/NE564_5.png"></div>  </li></ul><h3 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h3><p>NE564是一款带有后检测处理器的单片锁相环。肖特基钳位晶体管的使用和优化的器件几何尺寸将工作频率扩展到大于50MHz。<br>除了传统的PLL应用之外，NE564还可用作具有可控频率偏差的调制器。<br>PLL的输出可以写成如下公式所示：<br>VO =(fIN - fO)/KVCO<br>KVCO = VCO的转换增益<br>fIN =输入信号的频率<br>fO = VCO的自由运行频率<br>恢复FSK信号的过程涉及将PLL输出转换为逻辑兼容信号。 对于高数据速率，由于环路滤波器的宽带特性，在PLL的输出端将存在相当大量的载波。 为避免使用复杂的滤波器，需要具有迟滞或施密特触发器的比较器。 在VCO的转换增益固定的情况下，等式1给出的输出电压根据fIN与f0的频率偏差而变化。 由于这在系统与系统之间存在差异，因此必须能够改变施密特触发器的滞后，以便可以针对特定系统进行优化。 这是通过改变引脚15处的电压在564中完成的，这导致施密特触发器的滞后变化。<br>对于FSK信号，需要考虑的一个重要因素是VCO自身的自由运行频率的漂移。 如果由于温度而发生变化，则根据公式1，它将导致PLL输出的DC电平发生变化，从而导致数字输出信号中的误差。 对于窄带信号尤其如此，其中fIN本身的偏差可能小于由于温度引起的fO的变化。 如果检索信号的DC或平均值并将其用作比较器的参考，则可以消除这种影响。 以这种方式，PLL输出的DC电平的变化不会影响FSK输出。</p><h4 id="VCO部分"><a href="#VCO部分" class="headerlink" title="VCO部分"></a>VCO部分</h4><p>由于其固有的高频性能，在VCO中使用发射极耦合振荡器。 在电路中，如等效示意图所示，具有电流源Q25-Q26的晶体管Q21和Q23形成基本振荡器。 振荡器的近似自由运行频率如下式所示：<br>fO =1/[22 RC (C1 + CS)]<br>RC = R19 = R20 = 100Ω (INTERNAL)<br>C1 =外部频率设定电容器<br>CS =杂散电容<br>VD（相位检测器输出电压）的变化会改变振荡器的频率。如等式2所示，由于单片电阻器，振荡器的频率具有负温度系数。为了补偿这一点，引入具有负温度系数的电流IR以实现随温度的低频漂移。</p><h4 id="鉴相器部分"><a href="#鉴相器部分" class="headerlink" title="鉴相器部分"></a>鉴相器部分</h4><p>相位检测处理器由一个双平衡调制器和一个限幅放大器组成，以改善AM抑制。肖特基钳位垂直PNP用于获得TTL电平输入。通过改变Q4和Q15中的电流可以改变环路增益，这有效地改变了差分放大器的增益。这可以通过在引脚2处引入电流来实现。<br>后检测处理器部分<br>后检测处理器由单位增益跨导放大器和比较器组成。 放大器可用作用于解调FSK信号的DC检索器，以及用作线性FM解调的后检测滤波器。 比较器具有可调滞后，因此可以消除输出信号中的相位抖动。<br>如等效示意图所示，DC检索器由跨导放大器Q42-Q43与外部电容器一起形成，外部电容器连接在放大器输出端（引脚14）。 这形成了一个积分器，其输出电压如下式所示：<br>VO =gM/C2 VINdt<br>gM =放大器的跨导<br>C2 =输出端的电容（引脚14）<br>VIN =放大器输入端的信号电压<br>通过适当选择C2，可以改变积分器时间常数，使得输出电压是用于FSK的输入信号的DC或平均值，或者作为线性解调中的后检测滤波器。<br>具有迟滞的比较器由Q49-Q50组成，Q47-Q48提供正反馈。 通过改变Q52中的电流来改变滞后，导致比较器的环路增益变化。 这种滞后控制方法是DC控制，在标称值附近提供对称变化。</p><h4 id="公式设计"><a href="#公式设计" class="headerlink" title="公式设计"></a>公式设计</h4><p>VCO的自由运行频率如下式所示：</p><center>fO =1/[22 RC (C1 + CS)]</center><br><center>RC = R19 = R20 = 100Ω (INTERNAL)</center><br><center>C1 =外部频率设定电容器</center><br><center>CS =杂散电容</center><br>显示的环路滤波器图由以下等式解释：<br><center>fS =1/[1 + sRC3]</center><br><center>R = R12 = R13 = 1.3kW (Internal)</center><br>通过在引脚4和5上添加电容，将极点添加到环路转移处<br><center>w =1/RC3</center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/NE564/ti.jpg&quot; alt=&quot;ti&quot;&gt;&lt;br&gt;仅供参考，应用时请仔细阅读英文数据手册&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="//xueningyun.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="锁相环" scheme="//xueningyun.github.io/tags/%E9%94%81%E7%9B%B8%E7%8E%AF/"/>
    
      <category term="翻译" scheme="//xueningyun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="datasheet" scheme="//xueningyun.github.io/tags/datasheet/"/>
    
  </entry>
  
  <entry>
    <title>电影小栈</title>
    <link href="//xueningyun.github.io/2019/01/19/movie_house/"/>
    <id>//xueningyun.github.io/2019/01/19/movie_house/</id>
    <published>2019-01-19T02:13:29.000Z</published>
    <updated>2020-04-20T08:21:32.667Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/movie_house/qyqx.jpg" alt="电影"><br>收录看过的好电影。<br><a id="more"></a></p><h3 id="小鞋子"><a href="#小鞋子" class="headerlink" title="小鞋子"></a>小鞋子</h3><div align="center"><img width="81%" height="81%" src="/images/movie_house/xiaoxiezi.jpg"></div><blockquote><p>朴实无华，温馨感人。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1303021/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/20094662/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="小情人"><a href="#小情人" class="headerlink" title="小情人"></a>小情人</h3><div align="center"><img width="81%" height="81%" src="https://cn.bing.com/th?id=OIP.iJ2QDp7gLHFBXtulNNdwdwAAAA&pid=Api&rs=1"></div><blockquote><p>13岁前的男孩、女孩不是同一种生物，你快了一步我心有旁骛。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1394488/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/20107802/newest" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="伴我同行"><a href="#伴我同行" class="headerlink" title="伴我同行"></a>伴我同行</h3><div align="center"><img width="81%" height="81%" src="https://cn.bing.com/th?id=OIP.qiLHuG4vw2xcMxDPKe2l6gHaEK&pid=Api&rs=1"></div><blockquote><p>“我再也没有交过像我十二岁那样的朋友了，每个人不都是这样吗？”</p></blockquote><blockquote><p>或许我们不会再有以前的时光，但别忘了，以后我们也不会再有现在的时光。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1292925/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/20108016/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="初吻"><a href="#初吻" class="headerlink" title="初吻"></a>初吻</h3><div align="center"><img width="81%" height="81%" src="/images/movie_house/chuwen.jpg"></div><blockquote><p>“世界上那么多有钱人，有才华的人，多愁善感的人，野蛮人，就只有这个人会让你开心的笑。”</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1340517/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/20108328/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="千与千寻"><a href="#千与千寻" class="headerlink" title="千与千寻"></a>千与千寻</h3><div align="center"><img width="81%" height="81%" src="https://file.36krcdn.com/20190625/v2_1561470639302_file_000"></div><blockquote><p>最喜欢的作品</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1291561/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/19573889/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="放牛班的春天"><a href="#放牛班的春天" class="headerlink" title="放牛班的春天"></a>放牛班的春天</h3><div align="center"><img width="81%" height="81%" src="http://img.mp.itc.cn/upload/20160715/a16fae6fdf214e3e92f4f1eee33076d2_th.png"></div><blockquote><p>小时候，老师一句无心却温暖的话，可能会影响你很久很久。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1291549/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/20031859/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="少年派的奇幻漂流"><a href="#少年派的奇幻漂流" class="headerlink" title="少年派的奇幻漂流"></a>少年派的奇幻漂流</h3><div align="center"><img width="81%" height="81%" src="https://cn.bing.com/th?id=OIP.GeJk7t0JK94VpnTPMejXvgHaEK&pid=Api&rs=1"></div><blockquote><p>李安执导，上乘之作。</p></blockquote><blockquote><p>每个人心里都会有一只孟加拉虎，但要很努力才能成为少年派。<br>影片的每一帧都很美，可以直接做壁纸用。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1929463/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/19764545/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="霸王别姬"><a href="#霸王别姬" class="headerlink" title="霸王别姬"></a>霸王别姬</h3><div align="center"><img width="81%" height="81%" src="https://cn.bing.com/th?id=OIP.gzGqwRI3-YAUW-_Vqy63xgHaEo&pid=Api&rs=1"></div><blockquote><p>中国少有的好电影</p></blockquote><blockquote><p>“我本是男儿郎,又不是女娇娥”道尽了陈蝶衣的一生。</p></blockquote><blockquote><p>“说的是一辈子！差一年，一个月，一天，一个时辰，都不算一辈子！”。张国荣演的是淋漓尽致，入魔了。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1291546/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/19628661/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="教父"><a href="#教父" class="headerlink" title="教父"></a>教父</h3><div align="center"><img width="81%" height="81%" src="http://www.88hgz.com/upload/attached/image/20160914/20160914102936_1585.jpg"></div><blockquote><p>最经典的黑帮电影，不接受反驳。</p></blockquote><blockquote><p>“让朋友低估你的优点，让敌人高估你的缺点。”<br>“你花时间和你的家人在一起吗? 我当然有。 很好!不照顾家人的男人,根本算不上是个男人。”</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1291841/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/19669116/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="心灵捕手"><a href="#心灵捕手" class="headerlink" title="心灵捕手"></a>心灵捕手</h3><div align="center"><img width="81%" height="81%" src="http://i6.qhimg.com/dr/270_500_/t019098e5710945eead.png"></div><blockquote><p>“你只是个孩子，你根本不晓得你在说什麽。所以问你艺术,你可能会提出艺术书籍中的粗浅论调，有关米开朗基罗,你知道很多，他的满腔政治热情，与教皇相交莫逆，耽于性爱，你对他很清楚吧？但你连西斯汀教堂的气味也不知道吧？你没试过站在那儿，昂首眺望天花板上的名画吧？肯定未见过吧？如果我问关于女人的事，你大可以向我如数家珍，你可能上过几次床，但你没法说出在女人身旁醒来时，那份内心真正的喜悦。你年轻彪悍，我如果和你谈论战争，你会向我大抛莎士比亚，朗诵“共赴战场，亲爱的朋友”，但你从未亲临战阵，未试过把挚友的头拥入怀里，看着他吸着最后一口气，凝望着你，向你求助。我问你何为爱情，你可能只会吟风弄月，但你未试过全情投入真心倾倒，四目交投时彼此了解对方的心，好比上帝安排天使下凡只献给你，把你从地狱深渊拯救出来，对她百般关怀的感受你也从未试过，你从未试过对她的情深款款矢志厮守，明知她患了绝症也再所不惜，你从未尝试过痛失挚爱的感受……” </p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1292656/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/19882317/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="狗十三"><a href="#狗十三" class="headerlink" title="狗十三"></a>狗十三</h3><div align="center"><img width="81%" height="81%" src="http://5b0988e595225.cdn.sohucs.com/images/20181211/1decfd73953247e58d9600201aae3475.jpeg"></div><blockquote><p>小孩的世界简单、单纯、对错分明；大人的世界利益主导，没有绝对的对错。小孩和大人的世界观冲突很大，成长过程中会发生激烈的碰撞。</p></blockquote><blockquote><p>把孩子当成有独立思考能力的成年人，尊重他们的看法，尊重他们的选择，并提醒他们为结果负责。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/25716096/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/20148067/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="花样年华"><a href="#花样年华" class="headerlink" title="花样年华"></a>花样年华</h3><div align="center"><img width="81%" height="81%" src="https://cn.bing.com/th?id=OIP.xMFUYZ07JHvNKWISnk6o8gHaFj&pid=Api&rs=1"></div><blockquote><p>＂我一开始只是想知道他们是怎么开始的，后来我发现原来一切都是在不知不觉中发生的。＂</p></blockquote><blockquote><p>剪刀手绝对是一个鬼才。</p></blockquote><blockquote><p>这电影，在看不懂的年纪，或者一辈子也看不懂，那一定很幸福。</p></blockquote><blockquote><p>珍惜眼前人。 </p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1291557/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/19822981/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="黑客帝国"><a href="#黑客帝国" class="headerlink" title="黑客帝国"></a>黑客帝国</h3><div align="center"><img width="81%" height="81%" src="https://cn.bing.com/th?id=OIP.hiFe9BkN6AO2YxxGUTjkewHaIf&pid=Api&rs=1"></div><blockquote><p>科幻片中的极品，标杆之作。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1291843/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/19593394/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="生化危机"><a href="#生化危机" class="headerlink" title="生化危机"></a>生化危机</h3><div align="center"><img width="81%" height="81%" src="http://img-download.pchome.net/download/1k1/8d/2j/ohy3nk-1c3i.jpg@0e_0o_320w_520h_90q.src"></div><blockquote><p>经典丧尸电影，剧情紧凑，动作精彩。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1306809/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/20052694/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="钢铁侠"><a href="#钢铁侠" class="headerlink" title="钢铁侠"></a>钢铁侠</h3><div align="center"><img width="81%" height="81%" src="http://www.sfs-cn.com/node3/ypjs/node27989/node27996/images/00241402.jpg"></div><blockquote><p>漫威电影的灵魂。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1432146/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/20114613/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="蝙蝠侠-黑暗骑士"><a href="#蝙蝠侠-黑暗骑士" class="headerlink" title="蝙蝠侠.黑暗骑士"></a>蝙蝠侠.黑暗骑士</h3><div align="center"><img width="81%" height="81%" src="https://i.gtimg.cn/qqlive/img/jpgcache/files/qqvideo/w/w7vmjen1fzoeygx.jpg"></div><blockquote><p>蝙蝠侠最经典的一部。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1851857/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/19568025/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="盗梦空间"><a href="#盗梦空间" class="headerlink" title="盗梦空间"></a>盗梦空间</h3><div align="center"><img width="81%" height="81%" src="http://img21.mtime.cn/pi/2010/06/25/015851.38504443.jpg"></div><blockquote><p>天才之作，精彩绝伦。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/3541415/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/19563888/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="触不可及"><a href="#触不可及" class="headerlink" title="触不可及"></a>触不可及</h3><div align="center"><img width="81%" height="81%" src="https://p.ssl.qhimg.com/t01e2aff99990d5fdd4.jpg"></div><blockquote><p>身体的残疾远比不了灵魂的残疾。</p></blockquote><blockquote><p>没有同情心，一方面来说，是对残疾人最好的尊重。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/6786002/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/20103105/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="绿皮书"><a href="#绿皮书" class="headerlink" title="绿皮书"></a>绿皮书</h3><div align="center"><img width="81%" height="81%" src="https://image.applecdn.net/vod/2018/09/25/5baa00d88d88e.jpg"></div><blockquote><p>2019奥斯卡最佳影片</p></blockquote><blockquote><p>雅俗共赏，本片的各方面都是一流的水准。</p></blockquote><blockquote><p>“如果我不够黑人，也不够白人，又或不够男人，那请你告诉我，托尼，那我到底算是什么人？！”</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/27060077/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/20710097/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="垫底辣妹"><a href="#垫底辣妹" class="headerlink" title="垫底辣妹"></a>垫底辣妹</h3><div align="center"><img width="81%" height="81%" src="https://cn.bing.com/th?id=OIP.bGb0m7JxJUPwfys7F0RqmgHaEo&pid=Api&rs=1"></div><blockquote><p>温馨感人又励志。看的时候，弹幕里有“我要上浙大”、“我要考上三中”、“专升本一定成功”、“考研成功”……<br>目标有大有小，有远大也有平凡，都是方向和追求，都在努力，可能失败，却都在坚持。很认同一句话“上帝明目张胆的不公平，凡人有保持偏执的权利（越哥文案）”。</p></blockquote><blockquote><p>想起这么一段话，“月薪三千的人与年入百万的人，能力上可能并没有什么不同，只是他们选择的赛道和大势不同。”所以如果你对现在的生活不满，不要觉得来不及，也不要轻易放弃，努力什么时候都来得及。</p></blockquote><blockquote><p>小时候,老师和课本都说坚持就能成功，坚信不疑，认为自己一定会很出色。慢慢长大，发现坚持很难，坚持过一年的事情寥寥无几，更久的，就几乎没有了。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/26259677/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/20043518/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="冰雪奇缘"><a href="#冰雪奇缘" class="headerlink" title="冰雪奇缘"></a>冰雪奇缘</h3><div align="center"><img width="81%" height="81%" src="https://cn.bing.com/th?id=OIP.uoGbCCpneoSn7ob-3LPIxQHaE3&pid=Api&rs=1"></div><blockquote><p>好喜欢《Let it go》</p></blockquote><blockquote><p>童话的世界里，真爱永远都是化解一切钥匙。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/4202982/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/19944656/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul><h3 id="龙猫"><a href="#龙猫" class="headerlink" title="龙猫"></a>龙猫</h3><div align="center"><img width="81%" height="81%" src="https://nowre.com/wp-content/uploads/2018/10/1-57.jpg"></div><blockquote><p>宫崎骏老爷子超治愈的一部片子。</p></blockquote><blockquote><p>迪士尼告诉你，真心可以战胜一切；宫崎骏告诉你，童心可以治愈一切。</p></blockquote><ul><li><font color="black" size="4">豆瓣影评: <a href="https://movie.douban.com/subject/1291560/" target="_blank" rel="noopener">douban</a></font></li><li><font color="black" size="4">知乎影评: <a href="https://www.zhihu.com/topic/19622668/hot" target="_blank" rel="noopener">zhihu</a></font></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/movie_house/qyqx.jpg&quot; alt=&quot;电影&quot;&gt;&lt;br&gt;收录看过的好电影。&lt;br&gt;
    
    </summary>
    
      <category term="凡间角落" scheme="//xueningyun.github.io/categories/%E5%87%A1%E9%97%B4%E8%A7%92%E8%90%BD/"/>
    
    
      <category term="电影" scheme="//xueningyun.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>CD74HC7046</title>
    <link href="//xueningyun.github.io/2019/01/09/CD74HC7046/"/>
    <id>//xueningyun.github.io/2019/01/09/CD74HC7046/</id>
    <published>2019-01-09T14:13:29.000Z</published>
    <updated>2020-04-20T08:17:47.701Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/CD74HC7046/ti.jpg" alt="ti"><br>仅供参考，应用时请仔细阅读英文数据手册</p><a id="more"></a><p><center>带VCO和锁定检测器的高速CMOS逻辑锁相环</center></p><h3 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h3><ul><li>VCC = 5V时，中心频率为18MHz（典型值），VCC = 4.5V时，最小中心频率为12MHz</li><li>两相比较器的选择<br>-单电平触发器<br>-边沿触发JK触发器</li><li>出色的VCO频率线性度</li><li>VCO抑制控制，用于ON/OFF键控和低待机功耗</li><li>极小频率漂移</li><li>运算放大器缓冲器引起的零电压偏移</li><li>工作电源电压范围<br>-VCO部分………………3V至6V<br>-数字部分 ………………2V至6V</li><li>扇出（过温范围）<br>-标准输出………………10 LSTTL（与非）载荷<br>-总线驱动器输出………………15 LSTTL载荷</li><li>宽工作温度范围………………-55Co至125Co</li><li>平衡传播延迟和过渡时间</li><li>与LSTTL逻辑IC相比功耗显著降低</li><li>HC类型<br>-2V至6V操作<br>-高抗噪性：NIL = 30％，NIH = VCC的30％<br>在VCC = 5V</li><li>HCT类型<br>-4.5V至5.5V操作<br>-直接LSTTL输入逻辑兼容性，VIL = 0.8V（最大值），VIH = 2V（最小值）<br>-CMOS输入兼容性，VOL，VOH时Il≤1μA</li></ul><div align="center"><img width="86%" height="86%" src="/images/CD74HC7046/CD74HC7046.png"></div><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><ul><li>FM调制和解调</li><li>频率合成和乘法</li><li>鉴频</li><li>音调解码</li><li>数据同步和调节</li><li>电压 - 频率转换</li><li>电机速度控制</li><li>相关文献——AN8823, CMOS Phase-Locked-Loop Application<br>Using the CD74HC/HCT7046A and<br>CD74HC/HCT7046A<h3 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h3>CD74HC7046A和CD74HCT7046A高速硅栅CMOS器件，符合JEDEC规定标准No. 7A，是包含线性压控振荡器（VCO）的锁相环（PLL）电路，有两相比较器（PC1，PC2）和锁定检测器。每个比较器都有一个信号输入和一个比较器输入。当PLL锁定时，锁定检测器在引脚1（LD）处给出高电平。锁定检测器电容必须连接在引脚15（CLD）和引脚8（GND）之间。对于100kHz至10MHz的频率范围，锁定检测电容应分别为1000pF至10pF。<br>信号输入可以直接耦合到大电压信号，或间接耦合（用串联电容）小电压信号。自偏置输入电路将小电压信号保持在输入放大器的线性区域内。使用无源低通滤波器和7046A形成二阶滤波器PLL环路。使用线性运算放大器技术实现了出色的VCO线性度。<div align="center"><img width="86%" height="86%" src="/images/CD74HC7046/CD74HC7046_0.png"></div></li></ul><h3 id="一般说明："><a href="#一般说明：" class="headerlink" title="一般说明："></a>一般说明：</h3><h4 id="VCO"><a href="#VCO" class="headerlink" title="VCO"></a>VCO</h4><p>VCO需要一个外部电容C1（在C1A和C1B之间）和一个外部电阻R1（在R1和Gnd之间）或两个外部电阻R1和R2（在R1和Gnd之间，以及R2和Gnd之间）。 电阻器R1和电容器C1确定VCO的频率范围。 如果需要，电阻器R2使VCO具有频率偏移。 见逻辑图，图2。<br>高输入阻抗的VCO，通过为设计人员提供多种电阻/电容范围选择，简化了低通滤波器的设计。为了不加载低通滤波器，在引脚10（DEMOUT）接解调器输出提供VCO输入电压。与传统技术相反，DEMOUT电压是低于VCO输入电压的一个阈值电压，这里DEMOUT电压等于VCO输入的电压。如果使用DEMOUT，则应在DEMOUT与Gnd之间负载电阻（RS）; 如果未使用，DEMOUT应保持打开状态。 VCO输出（VCOOUT）可以直接连接到比较器输入（COMPIN），或通过分频器连接。 VCO输出信号的额定占空比为50％。 禁止输入（INH）的低电平使能VCO，而高电平禁用VCO，其以最小功耗待机。</p><h4 id="鉴相器（相位比较器）"><a href="#鉴相器（相位比较器）" class="headerlink" title="鉴相器（相位比较器）"></a>鉴相器（相位比较器）</h4><p>若信号摆幅在标准HC系列输入逻辑电平之间，信号输入（SIGIN）就可以直接耦合到引脚14的自偏置放大器。而对于摆幅较小的信号，需要电容耦合。</p><div align="center"><img width="86%" height="86%" src="/images/CD74HC7046/CD74HC7046_1.png"></div><br><div align="center"><img width="86%" height="86%" src="/images/CD74HC7046/CD74HC7046_2.png"></div><br><div align="center"><img width="86%" height="86%" src="/images/CD74HC7046/CD74HC7046_3.png"></div><br><div align="center"><img width="86%" height="86%" src="/images/CD74HC7046/CD74HC7046_4.png"></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/CD74HC7046/ti.jpg&quot; alt=&quot;ti&quot;&gt;&lt;br&gt;仅供参考，应用时请仔细阅读英文数据手册&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="//xueningyun.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="锁相环" scheme="//xueningyun.github.io/tags/%E9%94%81%E7%9B%B8%E7%8E%AF/"/>
    
      <category term="翻译" scheme="//xueningyun.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="datasheet" scheme="//xueningyun.github.io/tags/datasheet/"/>
    
  </entry>
  
</feed>
