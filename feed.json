{"title":"Xiaoguo's Blog","description":"Stay silly,stay curious,like a child.","language":"","link":"//xueningyun.github.io","pubDate":"Mon, 11 May 2020 09:06:00 GMT","lastBuildDate":"Mon, 11 May 2020 14:53:32 GMT","generator":"hexo-generator-json-feed","webMaster":"雪柠云","items":[{"title":"微机原理","link":"//xueningyun.github.io/2020/05/11/wjyl/","description":"计算机基础知识数制十进制（D）、二进制（B）、十六进制（H）、八进制（O） 码制原码、补码、反码8421BCD码、ASCII码 计算机系统组成 8086微处理器8086是一种单片微处理芯片，其内部数据总线的宽度是16位，外部数据总线宽度也是16位。8086地址总线的宽度为20位，有1MB（2^20）寻址空间。8086CPU由总线接口部件BIU和执行部件EU组成。 寄存器8086微处理器包含有13个16位的寄存器。4个通用寄存器（AX，BX，CX，DX）4个段寄存器（CS，DS，SS，ES）4个指针和变址寄存器（SP，BP，SI，DI）指令指针（IP）1个标志寄存器 通用寄存器8086含4个16位数据寄存器,它们又可分为8个8位寄存器。 常用来存放参与运算的操作数或运算结果。数据寄存器特有的习惯用法AX:累加器。多用于存放中间运算结果。所有I/O指令必须都通过AX与接口传送信息。BX:基址寄存器。在间接寻址中用于存放基地址。CX:计数寄存器。用于在循环或串操作指令中存放循环次数或重复次数。DX:数据寄存器。在32位乘除法运算时,存放高16位数;在间接寻址的I/O指令中存放I/O。#### 段寄存器CS:代码段寄存器,代码段用于存放指令代码。DS:数据段寄存器。ES:附加段寄存器,SS:堆栈段寄存器,堆栈段用于存放返回地址,保存寄存器内容,传递参数。#### 指针和变址寄存器SP：堆栈指针寄存器，其内容为栈顶的偏移地址；BP：基址指针寄存器，常用于在访问内存时存放内存单元的偏移地址；SI：源变址寄存器；DI：目标变址寄存器。#### 指令指针（IP）16位指令指针寄存器，其内容为下一条要执行的指令的偏移地址。#### 标志寄存器状态标志进位标志位（CF）：运算结果的最高位有进位或有借位，则CF=1；辅助进位标志位（AF）：运算结果的低四位有进位或借位，则AF=1；溢出标志位（OF）：运算结果有溢出，则OF=1；零标志位（ZF）：反映指令的执行是否产生一个为零的结果；符号标志位（SF）：指出该指令的执行是否产生一个负的结果；奇偶标志位（PF）：表示指令运算结果的低8位“1”个数是否为偶数；控制标志中断允许标志位（IF）：表示CPU是否能够响应外部可屏蔽中断请求，IF=1，允许相应可屏蔽中断；跟踪标志（TF）：单步标志，为1时，CPU单步执行，可进行调试；方向标志（DF）：为0时地址指针自动增量。#### 8086的主要引脚及其功能AD15~AD0：双向三态的地址总线，输入/输出信号。INTR：可屏蔽中断请求输入信号，高电平有效。可通过设置IF的值来控制。NMI：非屏蔽中断输入信号。不能用软件进行屏蔽。RESET：复位输入信号，高电平有效。MN/MX：最小最大模式输入控制信号。### 8086指令系统#### 寻址方式数据寻址方式（四类，九种）：1、立即数寻址方式MOV AX,1234H2、寄存器寻址方式MOV AX,BX ；AX,BX均为寄存器。3、存储器寻址方式：直接寻址方式：MOV AX,[5634H]寄存器间接寻址方式：MOV AX,[BX] ；用中括号将BX括起来表示将BX中的值作为地址。寄存器相对寻址方式：MOV AX,COUNT[BX] 或 MOV AX, [COUNT+BX]基址变址寻址方式：例：MOV AX,[BX][SI]MOV AX,[BX+SI]MOV AX,CS:[BX+SI]基址变址相对寻址方式：例：MOV AX,TABLE[BX][SI]MOV AX,TABLE[BX+SI]mov AX,[BX+SI+TABLE] ;上面三种方式等价#### 指令系统(1) 数据传送指令。(2) 算术运算指令。(3) 逻辑运算指令。(4) 串操作指令。(5) 控制转移指令。(6) 处理器控制指令。(7) 保护方式指令。##### 数据传送指令1、传送指令格式：MOV DEST,SRC2、交换指令格式：XCHG OPR1，OPR23、堆栈操作指令压栈指令，格式：PUSH SRC出栈指令，格式：POP DEST4、地址传送指令格式：LEA REG，MEM功能：将源操作数的有效地址传送到通用寄存器，操作数REG为16位或32位通用寄存器，源操作数为16位或32位存储器操作数。格式：LDS(ES，FS，GS，SS)REG，MEM功能：根据源操作数指定的偏移地址，在数据段中取出段地址和偏移地址分别送指定的段寄存器和指定的通用寄存器。5、标志寄存器传送指令LAHFSAHF功能：LAHF将标志寄存器中低8位送AH中。SAHF将AH中内容送标志寄存器中低8位PUSHFPOPF功能：PUSHF将标志寄存器低16位内容压入堆栈，SP←SP-2。POPF将当前栈顶一个字传送到标志寄存器低16位中，SP←SP+2。PUSHFDPOPFD功能：PUSHFD将标志寄存器32位内容压入堆栈SP←SP-4。POPFD将当前栈顶一个双字传送到32位标志寄存器中，SP←SP+4。6、查表指令格式：XLAT功能：将寄存器AL中的内容转换成存储器表格中的对应值。实现直接查表功能。XLAT指令规定：BX寄存器存放表的首地址，AL寄存器中存放表内偏移量，执行XLAT指令，以段寄存器DS的内容为段基址，有效地址为BX和AL内容之和，取出表中一个字节内容送AL中。7、符号扩展指令CBW功能：将AL中8位带符号数，进行带符号扩展为16位，送AX中。带符号扩展是指对正数高位扩展为全“0”，对负数高位扩展为全“1”。CWD功能：将AX中16位带符号数，进行带符号扩展为32位，送DX和AX中。高16位送DX中，低16位送AX中。CWDE功能：将AX中16位带符号数，进行带符号扩展为32位，送EAX中。CDQ功能：将EAX中32位带符号数，进行带符号扩展为64位，送EDX和EAX中。低32位送EAX中，高32位送EDX中。符号扩展指令对标志位无影响。##### 算术运算指令1、加法指令格式：ADD DEST，SRC ADC DEST，SRC功能：ADD是将源操作数与目的操作数相加，结果传送到目的操作数。ADC是将源操作数与目的操作数以及CF(低位进位)值相加，结果传送到目的操作数。源操作数可以是通用寄存器、存储器或立即数。目的操作数可以是通用寄存器或存储器操作数。ADD，ADC指令影响标志位为OF，SF，ZF，AF，PF，CF。2、减法指令格式：SUB DEST，SRC SBB DEST，SRC功能：SUB将目的操作数减源操作数，结果送目的操作数。SBB将目的操作数减源操作数，还要减CF(低位借位)值，结果送目的操作数。对标志位的影响与加法指令一样。3、加1减1指令格式：INC DEST DEC DEST功能：INC指令将目的操作数加1，结果送目的操作数。DEC指令将目的操作数减1，结果送目的操作数。目的操作数为通用寄存器或存储器操作数。INC，DEC指令影响标志位为OF，SF，ZF，AF，PF。4、比较指令格式：CMP DEST，SRC功能：目的操作数减源操作数，结果不回送。源操作数为通用寄存器、存储器和立即数。目的操作数为通用寄存器、存储器操作数。CMP指令影响标志位为OF，SF，ZF，AF，PF，CF。· 两个正数比较，使用SF标志位判断。 SF=0，则AX≥BX，若ZF=1，则AX=BX SF=1，则AX&lt;BX· 两个无符号数比较，使用CF标志位判断。 CF=0，则AX≥BX，若ZF=1，则AX=BX CF=1，则AX&lt;BX· 两个负数比较，使用SF标志位判断。 SF=0，则AX≥BX，若ZF=1，则AX=BX SF=1，则AX&lt;BX· 两个异符号数比较。 如果OF=0，仍可用SF标志判断大小。 如果OF=1，说明结果的符号位发生错误，所以 SF=0，则AX&lt;BX SF=1，则AX＞BX5、求补指令格式：NEGDEST功能：对目的操作数求补，用零减去目的操作数，结果送目的操作数。目的操作数为通用寄存器、存储器操作数。NEG指令影响标志位为OF，SF，ZF，AF，PF，CF。6、乘法指令格式：MUL SRC IMUL SRC功能：MUL为无符号数乘法指令，IMUL为带符号数乘法指令。源操作数为通用寄存器或存储器操作数。目的操作数缺省存放在AL、AX中，乘积存AX、DX中。MUL，IMUL指令执行后，若CF=OF=0，表示乘积高位无有效数据；若CF=OF=1表示乘积高位含有效数据，对其它标志位无定义。7、除法指令格式：DIV SRC IDIV SRC功能：DIV为无符号数除法，IDIV为带符号数除法。源操作数作为除数，为通用寄存器或存储器操作数。被除数缺省在目的操作数AX，DX中。被除数必须是除数的双倍字长，一般应使用扩展指令进行高位扩展。当进行无符号数除法时，被除数高位按0扩展为双倍除数字长。当进行有符号数除法时，被除数以补码表示。可使用扩展指令CBW，CWD，CWDE，CDQ进行高位扩展。8、BCD算术运算DAA功能：将存放在AL中的二进制和数，调整为压缩格式的BCD码表示形式。调整方法：若AL中低4位大于9或标志AF=1(表示低4位向高4位有进位)，则AL+6→AL,1→AF，若AL中高4位大于9，或标志CF=1，(表示高4位有进位)，则AL+60H→AL,1→CF，DAA指令一般紧跟在ADD或ADC指令之后使用，影响标志位为SF，ZF，AF，PF，CF。OF无定义。DAS功能：将存放在AL中的二进制差数，调整为压缩的BCD码表示形式。调整方法：若AL中低4位大于9或标志AF=1(表示低4位向高位借位)，则AL-6→AL,1→AF，若AL中高4位大于9或标志CF=1(表示高4位向高位借位)，则AL-60H→AL,1→CF。对标志位，与DAA一样。9、ASCII算术运算AAA、AAS、AAM##### 逻辑运算指令1、逻辑与指令格式：AND DEST，SRC功能：目的操作数和源操作数按位进行逻辑与运算，结果存目的操作数中。源操作数可以是通用寄存器、存储器或立即数。目的操作数可以是通用寄存器或存储器操作数。2、逻辑或指令格式：OR DEST，SRC功能略3、逻辑异或指令格式：XOR DEST，SRC功能略4、逻辑非指令格式：NOT DEST功能略5、测试指令格式：TEST DEST，SRC功能：目的操作数和源操作数按位进行逻辑与操作，结果不回送目的操作数。源操作数可以为通用寄存器、存储器或立即数。目的操作数可以为通用寄存器或存储器操作数。##### 移位指令1、非循环移位算术/逻辑左移指令。格式：SAL DEST，OPRD SHL DEST，OPRD功能：按照操作数OPRD规定的移位位数，对目的操作数进行左移操作，最高位移入CF中。每移动一位，右边补一位0。逻辑右移指令格式：SHR DEST，SRC功能：按照操作数OPRD规定的移位位数，对目的操作数进行右移操作，最低位移至CF中。每移动一位，左边补一位0算术右移指令格式：SAR DEST，OPRD功能：按照操作数OPRD规定的移位次数，对目的操作数进行右移操作，最低位移至CF中，最高位(即符号位)保持不变。2、循环移位循环移位指令格式：ROL DEST，OPRD ROR DEST，OPRD RCL DEST，OPRD RCR DEST，OPRD功能：循环左移指令ROL，目的操作数左移，每移位一次，其最高位移入最低位，同时最高位也移入进位标志CF。循环右移指令 ROR，目的操作数右移，每移位一次，其最低位移入最高位，同时最低位也移入进位标志CF。带进位循环左移指令RCL，目的操作数左移，每移动一次，其最高位移入进位标志CF，CF移入最低位。带进位循环右移指令RCR，目的操作数右移，每移动一次，其最低位移入进位标志CF，CF移入最高位。##### 控制转移类指令1、无条件转移指令格式：JMP TARGET功能：使程序无条件地转移到指令规定的目的地址TARGET去执行指令。转移分为短转移、段内转移和段间转移。2、条件转移指令 3、循环控制指令LOOP TARGET功能：将CX内容减1，不影响标志位，若CX不等于0，则转移到目标地址TARGET处执行程序。 串操作指令1、方向标志指令格式：CLD/STD功能：CLD为清除方向标志，即将DF置‘0’。STD为设置方向标志，即将DF置‘1’。2、串传送指令格式：MOVS DESTS, SRCS3、串比较指令格式：CMPS DESTS, SRCS CMPSB/CMPSW/CMPSD4、串扫描指令格式：SCAS DESTS SCASB/SCASW/SCASD 输入/输出指令1、输入指令格式：IN DEST, SRC2、输出指令格式：OUT DEST, SRC3、串输入指令格式：INS DESTS, DX4、串输出指令格式：OUTS DX,SRCS 处理器控制1、总线封锁前缀格式：LOCK指令功能：LOCK为指令前缀，可以使LOCK引脚变成逻辑0，在LOCK引脚有效期间，禁止外部总线上的其它处理器存取带有LOCK2、空操作格式：NOP功能：空操作，除使IP/EIP增1外，不做任何工作。该指令不影响标志位。3、处理器等待指令格式：WAIT功能：检查BUSY引脚状态，等待协处理器完成当前工作。4、处理器暂停指令格式：HLT功能：暂停程序的执行。当产生一个外部中断或非屏蔽中断时，才继续执行下一条指令。 中断指令与DOS功能调用1、中断指令（INT）在实模式下，中断矢量以4个字节存放在中断矢量表中，中断矢量表为1k字节(00000H~003FFH)，中断矢量表允许存放256个中断矢量，每个中断矢量包含一个中断服务程序地址(段值和16位偏移地址)，中断矢量地址指针由中断类型码乘以4得到。2、DOS功能调用键盘输入单字符MOV AH，1INT 21H 键盘输入字符串MOV AH，0AHINT 21H 输出单字符MOV AH，2INT 21H 返回操作系统MOV AH，4CHINT 21H 伪指令CPU指令与伪指令之间的区别：(1)CPU指令是给CPU的命令，在运行时由CPU执行，每条指令对应CPU的一种特定的操作。而伪指令是给汇编程序的命令，在汇编过程中由汇编程序进行处理。(2)汇编以后，每条CPU指令产生一一对应的目标代码；而伪指令则不产生与之相应的目标代码。 1、数据定义伪指令DB 用来定义字节（BYTE）DW 用来定义字（WORD）DD 用来定义双字（DWORD） 2、补充内容：类型：PTR 注意：单操作数指令，当操作数为基址、变址、基+变的时候必须定义。 3、符号定义伪指令：EQU格式：名字 EQU 表达式EQU伪指令将表达式的值赋予一个名字，以后可用这个名字来代替上述表达式。 LABEL伪指令的用途是定义标号或变量的类型。格式：名字 LABEL 类型变量的类型可以是BYTE，WORD，DWORD，标号的类型可以是NEAR或FAR。 4、段定义伪指令与段有关的伪指令有：SEGMENT、ENDS、ASSUME、ORG。 段定义伪指令的格式如下：段名 SEGMENT [定位类型] [组合类型] [’类别’] …… 段名 ENDS 5、汇编程序的一般结构DATA SEGMENT…DATA ENDSCODE SEGMENTASSUME CS:CODE,DS:DATABGN: MOV AX ,DATA MOV DS,AX …… MOV AH,4CH INT 21HCODE ENDSEND BGN 存储器 输入输出接口 中断 定时器 本笔记源自网络和教材","pubDate":"Mon, 11 May 2020 09:06:00 GMT","guid":"//xueningyun.github.io/2020/05/11/wjyl/","category":"学习笔记"},{"title":"写给弟弟的话","link":"//xueningyun.github.io/2020/04/24/didi/","description":"你做的面条，挺好看的，也好吃。你翻我小时候的日记，说我写的日记里，说你讨嫌，又乖巧，一会又调皮，又可爱。你说了我老半天，我说要记得好好念书，要不然以后会吃苦，你说不一定，看自己对生活的要求，平淡一些日子也挺好。对于你的想法，我也不加以限制，希望你有自己的方向，有自己的快乐。下面是刘瑜写给小布谷的一段话，分享给你。","pubDate":"Fri, 24 Apr 2020 15:06:00 GMT","guid":"//xueningyun.github.io/2020/04/24/didi/","category":"凡间角落"},{"title":"折枝","link":"//xueningyun.github.io/2020/04/22/zhezhi/","description":"桃花谢后，小桃子长出来了。刚好他来了，那个驻村的农业指导干部。","pubDate":"Wed, 22 Apr 2020 14:10:29 GMT","guid":"//xueningyun.github.io/2020/04/22/zhezhi/","category":"凡间角落"},{"title":"排序算法","link":"//xueningyun.github.io/2020/04/21/paixu/","description":"选择排序简单选择排序，通过n-i次关键字间的比较，从n-i+1个记录中选出关键字最小的记录，并和第i个记录交换之，即从第一个数据开始，进行比较，找出最小值，第二次从第二个数据开始，以此类推。C语言代码如下(其中Sqlist为结构体定义，由数组和数组长度构成)： 123456789101112131415161718192021void SelectSort(Sqlist *L)&#123; int i,j,min; for(i=0;i&lt;L-&gt;length;i++) &#123; min=i; for(j=i+1;j&lt;=L-&gt;length;j++) &#123; if(L-&gt;r[min]&gt;L-&gt;r[j]) min=j; &#125; &#125; if(i!=min) swap(L,i,min);&#125;void swap(Sqlist *L,int i,int j)&#123; int temp=L-&gt;r[i]; L-&gt;r[i]=L-&gt;r[j]; L-&gt;r[j]=temp;&#125;","pubDate":"Tue, 21 Apr 2020 05:15:00 GMT","guid":"//xueningyun.github.io/2020/04/21/paixu/","category":"学习笔记"},{"title":"计算机网络笔记","link":"//xueningyun.github.io/2020/04/17/jsjwl/","description":"为韩立刚老师计算机网络课程学习笔记","pubDate":"Fri, 17 Apr 2020 13:36:00 GMT","guid":"//xueningyun.github.io/2020/04/17/jsjwl/","category":"学习笔记"},{"title":"数据结构笔记","link":"//xueningyun.github.io/2020/04/09/sjjg/","description":"写在前面：个人学习笔记。","pubDate":"Thu, 09 Apr 2020 06:24:29 GMT","guid":"//xueningyun.github.io/2020/04/09/sjjg/","category":"学习笔记"},{"title":"C语言笔记","link":"//xueningyun.github.io/2020/04/07/C/","description":"写在前面：个人学习笔记。","pubDate":"Tue, 07 Apr 2020 14:46:29 GMT","guid":"//xueningyun.github.io/2020/04/07/C/","category":"学习笔记"},{"title":"FFT简述","link":"//xueningyun.github.io/2019/03/13/FFT/","description":"写在前面：水平有限，经供参考。","pubDate":"Wed, 13 Mar 2019 12:46:29 GMT","guid":"//xueningyun.github.io/2019/03/13/FFT/","category":"学习笔记"},{"title":"晶振电路概述","link":"//xueningyun.github.io/2019/03/13/COC/","description":"写在前面：本文参考资料大多数来自于TI官网，结合笔者实际在制作经验所写。水平有限，欢迎指正。","pubDate":"Wed, 13 Mar 2019 12:46:29 GMT","guid":"//xueningyun.github.io/2019/03/13/COC/","category":"学习笔记"},{"title":"手机拍照","link":"//xueningyun.github.io/2019/02/12/Phone_photo/","description":"突出主题，色彩协调，画面简洁。","pubDate":"Tue, 12 Feb 2019 07:00:00 GMT","guid":"//xueningyun.github.io/2019/02/12/Phone_photo/","category":"凡间角落"},{"title":"读书笔记","link":"//xueningyun.github.io/2019/01/19/study_notes/","description":"读书笔记，收录书单。","pubDate":"Sat, 19 Jan 2019 02:15:29 GMT","guid":"//xueningyun.github.io/2019/01/19/study_notes/","category":"凡间角落"},{"title":"电影小栈","link":"//xueningyun.github.io/2019/01/19/movie_house/","description":"收录看过的好电影。","pubDate":"Sat, 19 Jan 2019 02:13:29 GMT","guid":"//xueningyun.github.io/2019/01/19/movie_house/","category":"凡间角落"},{"title":"NE564","link":"//xueningyun.github.io/2019/01/19/NE564/","description":"仅供参考，应用时请仔细阅读英文数据手册","pubDate":"Sat, 19 Jan 2019 02:13:29 GMT","guid":"//xueningyun.github.io/2019/01/19/NE564/","category":"学习笔记"},{"title":"CD74HC7046","link":"//xueningyun.github.io/2019/01/09/CD74HC7046/","description":"仅供参考，应用时请仔细阅读英文数据手册","pubDate":"Wed, 09 Jan 2019 14:13:29 GMT","guid":"//xueningyun.github.io/2019/01/09/CD74HC7046/","category":"学习笔记"}]}